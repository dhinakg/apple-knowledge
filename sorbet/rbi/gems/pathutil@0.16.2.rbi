# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pathutil` gem.
# Please instead update this file by running `bin/tapioca gem pathutil`.

# source://pathutil-0.16.2/lib/pathutil/helpers.rb:5
class Pathutil
  extend ::Forwardable::Extended
  extend ::Pathutil::Helpers

  # --
  # Initialize a new instance.
  # --
  #
  # @note A lot of this class can be compatible with Pathname.
  # @return Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:19
  def initialize(path); end

  # source://RUBY_ROOT/forwardable.rb:229
  def !~(*args, **_arg1, &block); end

  # --
  #
  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def +(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def /(*args, &block); end

  # --
  # Strictly check to see if a path is behind other path but within it.
  # --
  #
  # @example Pathutil.new("/") < Pathutil.new("/hello") # => true
  # @return true|false
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:171
  def <(other); end

  # --
  # Check to see if a path is behind the other path but within it.
  # --
  #
  # @example Pathutil.new("/hello") < Pathutil.new("/hello") # => true
  # @example Pathutil.new("/") < Pathutil.new("/hello") # => true
  # @return true|false
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:183
  def <=(other); end

  # source://RUBY_ROOT/forwardable.rb:229
  def <=>(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def ==(*args, **_arg1, &block); end

  # --
  # A stricter version of `==` that also makes sure the object matches.
  # --
  #
  # @return true|false
  # @see `String#==` for more details.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:139
  def ===(other); end

  # source://RUBY_ROOT/forwardable.rb:229
  def =~(*args, **_arg1, &block); end

  # --
  # Strictly checks to see if a path is deeper but within the path of the other.
  # --
  #
  # @example Pathutil.new("/hello/world") > Pathutil.new("/hello") # => true
  # @return true|false
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:160
  def >(other); end

  # --
  # Checks to see if a path falls within a path and deeper or is the other.
  # --
  #
  # @example Pathutil.new("/hello") >= Pathutil.new("/") # => true
  # @example Pathutil.new("/hello") >= Pathutil.new("/hello") # => true
  # @return true|false
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:149
  def >=(other); end

  # source://RUBY_ROOT/forwardable.rb:229
  def [](*args, **_arg1, &block); end

  # --
  # Make a path absolute
  # --
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:38
  def absolute; end

  # --
  # Check to see if the path is absolute, as in: starts with "/"
  # --
  #
  # @note "./" is considered relative.
  # @return [Boolean] true|false
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:194
  def absolute?; end

  # --
  # --
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:610
  def aggressive_cleanpath; end

  # --
  # Break apart the path and yield each with the previous parts.
  # --
  #
  # @example Pathutil.new("/hello/world").ascend.to_a # => ["/", "/hello", "/hello/world"]
  # @example Pathutil.new("/hello/world").ascend { |path| $stdout.puts path }
  # @return Enum
  # @yield Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:207
  def ascend; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def atime(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def basename(*args, &block); end

  # --
  # Binread took two steroid shots: it can normalize your string, and encode.
  # --
  #
  # @note You can set the default encodings via the class.
  # @return String
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:513
  def binread(*args, **kwd); end

  # --
  # Binwrite took two steroid shots: it can normalize your string, and encode.
  # --
  #
  # @note You can set the default encodings via the class.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:573
  def binwrite(data, *args, **kwd); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def birthtime(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def blockdev?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def chardev?(*args, &block); end

  # --
  # Move to the current directory temporarily (or for good) and do work son.
  # --
  #
  # @note you do not need to ship a block at all.
  # @return nil
  # @yield &block
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:355
  def chdir; end

  # --
  # Grab all of the children from the current directory, including hidden.
  # --
  #
  # @yield Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:307
  def children; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def chmod(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def chomp(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def chown(*args, &block); end

  # --
  # --
  #
  # @note This is a wholesale rip and cleanup of Pathname#cleanpath
  # @return Pathutil
  # @see Pathname#cleanpath.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:50
  def cleanpath(symlink = T.unsafe(nil)); end

  # --
  # --
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:610
  def cleanpath_aggressive; end

  # --
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:633
  def cleanpath_conservative; end

  # --
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:633
  def conservative_cleanpath; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def cp(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def cp_r(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def ctime(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def delete(*args, &block); end

  # --
  # Break apart the path in reverse order and descend into the path.
  # --
  #
  # @example Pathutil.new("/hello/world").descend.to_a # => ["/hello/world", "/hello", "/"]
  # @example Pathutil.new("/hello/world").descend { |path| $stdout.puts path }
  # @return Enum
  # @yield Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:237
  def descend; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def directory?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def dirname(*args, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def each_child(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def each_entry(*args, **_arg1, &block); end

  # --
  # Splits the path returning each part (filename) back to you.
  # --
  #
  # @return Enum
  # @yield Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:385
  def each_filename; end

  # --
  # Wraps `readlines` and allows you to yield on the result.
  # --
  #
  # @example Pathutil.new("/hello/world").each_line { |line| $stdout.puts line }
  # @return Enum
  # @yield Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:257
  def each_line; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def empty?(*args, &block); end

  # --
  # --
  #
  # @see `self.class.encoding` as this is an alias.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:482
  def encoding; end

  # Sets the attribute encoding
  #
  # @param value the value to set the attribute encoding to.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:10
  def encoding=(_arg0); end

  # source://RUBY_ROOT/forwardable.rb:229
  def end_with?(*args, **_arg1, &block); end

  # --
  # Expands the path and left joins the root to the path.
  # --
  #
  # @return Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:440
  def enforce_root(root); end

  # --
  # Grab all of the children from the current directory, including hidden.
  # --
  #
  # @yield Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:307
  def entries; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def executable?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def executable_real?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def exist?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def expand_path(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def extname(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def file?(*args, &block); end

  # --
  # Find all files without care and yield the given block.
  # --
  #
  # @return Enum
  # @yield Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:373
  def find; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def first(*args, &block); end

  # --
  # Unlike traditional `fnmatch`, with this one `Regexp` is allowed.
  # --
  #
  # @example Pathutil.new("/hello").fnmatch?("/hello") # => true
  # @example Pathutil.new("/hello").fnmatch?(/h/) # => true
  # @return [Boolean] true|false
  # @see `File#fnmatch` for more information.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:273
  def fnmatch(matcher); end

  # --
  # Unlike traditional `fnmatch`, with this one `Regexp` is allowed.
  # --
  #
  # @example Pathutil.new("/hello").fnmatch?("/hello") # => true
  # @example Pathutil.new("/hello").fnmatch?(/h/) # => true
  # @return [Boolean] true|false
  # @see `File#fnmatch` for more information.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:273
  def fnmatch?(matcher); end

  # source://RUBY_ROOT/forwardable.rb:229
  def freeze(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def frozen?(*args, **_arg1, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def ftype(*args, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def gcwd(*args, **_arg1, &block); end

  # --
  # Allows you to glob however you wish to glob in the current `Pathutil`
  # --
  #
  # @return Enum
  # @see `File::Constants` for a list of flags.
  # @yield Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:331
  def glob(pattern, flags = T.unsafe(nil)); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def grpowned?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def gsub(*args, &block); end

  # --
  # Allows you to check if the current path is in the path you want.
  # --
  #
  # @return [Boolean] true|false
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:290
  def in_path?(path); end

  # --
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:298
  def inspect; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def join(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def last(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def lchmod(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def lchown(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def link(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def lstat(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def make_link(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def make_symlink(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def mkdir(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def mkdir_p(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def mkpath(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def mountpoint?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def mtime(*args, &block); end

  # --
  # --
  #
  # @see `self.class.normalize` as this is an alias.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:473
  def normalize; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def open(*args, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def opendir(*args, **_arg1, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def owned?(*args, &block); end

  # --
  # Get the parent of the current path.
  # --
  #
  # @note This will simply return self if "/".
  # @return Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:397
  def parent; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def pipe?(*args, &block); end

  # --
  # Expands the path and left joins the root to the path.
  # --
  #
  # @return Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:440
  def prepend(root); end

  # source://RUBY_ROOT/forwardable.rb:229
  def pwd(*args, **_arg1, &block); end

  # --
  # Read took two steroid shots: it can normalize your string, and encode.
  # --
  #
  # @note You can set the default encodings via the class.
  # @return String
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:493
  def read(*args, **kwd); end

  # --
  # Read the file as a JSON file turning it into an object.
  # --
  #
  # @return Hash
  # @see self.class.read_json as this is a direct alias of that method.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:111
  def read_json(throw_missing: T.unsafe(nil)); end

  # --
  # Read the file as a YAML file turning it into an object.
  # --
  #
  # @return Hash
  # @see self.class.load_yaml as this a direct alias of that method.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:95
  def read_yaml(throw_missing: T.unsafe(nil), **kwd); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def readable?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def readable_real?(*args, &block); end

  # --
  # Readlines took two steroid shots: it can normalize your string, and encode.
  # --
  #
  # @note You can set the default encodings via the class.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:533
  def readlines(*args, **kwd); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def readlink(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def realdirpath(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def realpath(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def regexp_escape(*args, &block); end

  # --
  # Make a path relative.
  # --
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:28
  def relative; end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def relative?(*args, &block); end

  # --
  # A less complex version of `relative_path_from` that simply uses a
  # `Regexp` and returns the full path if it cannot be determined.
  # --
  #
  # @return Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:429
  def relative_path_from(from); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def rename(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def rm(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def rm_f(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def rm_r(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def rm_rf(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def rmdir(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def rmtree(*args, &block); end

  # --
  # Allows you to quickly determine if the file is the root folder.
  # --
  #
  # @return [Boolean] true|false
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:282
  def root?; end

  # --
  # Copy a directory, allowing symlinks if the link falls inside of the root.
  # This is indented for people who wish some safety to their copies.
  # --
  #
  # @note Ignore is ignored on safe_copy file because it's explicit.
  # @raise [ArgumentError]
  # @return nil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:453
  def safe_copy(to, root: T.unsafe(nil), ignore: T.unsafe(nil)); end

  # --
  # Search backwards for a file (like Rakefile, _config.yml, opts.yml).
  # --
  #
  # @example Pathutil.new("~/").expand_path.search_backwards(".bashrc") => [#<Pathutil:/home/user/.bashrc>]
  # @note It will return all results that it finds across all ascending paths.
  # @return Enum
  # @yield Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:61
  def search_backwards(file, backwards: T.unsafe(nil)); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def setgid?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def setuid?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def shellescape(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def size(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def size?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def socket?(*args, &block); end

  # --
  # Split the file into its dirname and basename, so you can do stuff.
  # --
  #
  # @return nil
  # @yield Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:409
  def split; end

  # --
  # Splits the path into all parts so that you can do step by step comparisons
  # --
  #
  # @example Pathutil.new("/my/path").split_path # => ["", "my", "path"]
  # @note The blank part is intentionally left there so that you can rejoin.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:128
  def split_path; end

  # source://RUBY_ROOT/forwardable.rb:229
  def start_with?(*args, **_arg1, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def stat(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def sticky?(*args, &block); end

  # --
  # Strips the windows drive from the path.
  # --
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:598
  def strip_windows_drive(path = T.unsafe(nil)); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def sub(*args, &block); end

  # --
  # Replace a files extension with your given extension.
  # --
  #
  # @note Your extension should start with "."
  # @return Pathutil
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:420
  def sub_ext(ext); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def symlink(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def symlink?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def sysopen(*args, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def to_a(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def to_path(*args, **_arg1, &block); end

  # --
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:589
  def to_regexp(guard: T.unsafe(nil)); end

  # source://RUBY_ROOT/forwardable.rb:229
  def to_s(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def to_str(*args, **_arg1, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def touch(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def truncate(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def unlink(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def utime(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def world_readable?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def world_writable?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def writable?(*args, &block); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def writable_real?(*args, &block); end

  # --
  # Write took two steroid shots: it can normalize your string, and encode.
  # --
  #
  # @note You can set the default encodings via the class.
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:553
  def write(data, *args, **kwd); end

  # source://forwardable-extended-2.6.0/lib/forwardable/extended.rb:103
  def zero?(*args, &block); end

  private

  # source://pathutil-0.16.2/lib/pathutil.rb:663
  def expanded_paths(path); end

  # source://pathutil-0.16.2/lib/pathutil.rb:682
  def safe_copy_directory(to, root: T.unsafe(nil), ignore: T.unsafe(nil)); end

  # @raise [Errno::EPERM]
  #
  # source://pathutil-0.16.2/lib/pathutil.rb:671
  def safe_copy_file(to, root: T.unsafe(nil)); end

  class << self
    # --
    # Get the current directory that Ruby knows about.
    # --
    #
    # @note We do nothing special here.
    # @return Pathutil
    #
    # source://pathutil-0.16.2/lib/pathutil.rb:723
    def cwd; end

    # --
    # Aliases the default system encoding to us so that we can do most read
    # and write operations with that encoding, instead of being crazy.
    # --
    #
    # @note you are encouraged to override this if you need to.
    #
    # source://pathutil-0.16.2/lib/pathutil.rb:737
    def encoding; end

    # Sets the attribute encoding
    #
    # @param value the value to set the attribute encoding to.
    #
    # source://pathutil-0.16.2/lib/pathutil.rb:716
    def encoding=(_arg0); end

    # --
    # Get the current directory that Ruby knows about.
    # --
    #
    # @note We do nothing special here.
    # @return Pathutil
    #
    # source://pathutil-0.16.2/lib/pathutil.rb:723
    def gcwd; end

    # --
    # Normalize CRLF -> LF   on Windows reads, to ease  your troubles.
    # Normalize LF   -> CLRF on Windows write, to ease  your troubles.
    # --
    #
    # source://pathutil-0.16.2/lib/pathutil.rb:747
    def normalize; end

    # --
    # Get the current directory that Ruby knows about.
    # --
    #
    # @note We do nothing special here.
    # @return Pathutil
    #
    # source://pathutil-0.16.2/lib/pathutil.rb:723
    def pwd; end

    # --
    # Make a temporary directory.
    # --
    #
    # @note if you adruptly exit it will not remove the dir.
    # @note this directory is removed on exit.
    # @return Pathutil
    #
    # source://pathutil-0.16.2/lib/pathutil.rb:760
    def tmpdir(*args); end

    # --
    # Make a temporary file.
    # --
    #
    # @note if you adruptly exit it will not remove the dir.
    # @note this file is removed on exit.
    # @return Pathutil
    #
    # source://pathutil-0.16.2/lib/pathutil.rb:775
    def tmpfile(*args); end
  end
end

# source://pathutil-0.16.2/lib/pathutil/helpers.rb:6
module Pathutil::Helpers
  extend ::Pathutil::Helpers

  # --
  #
  # source://pathutil-0.16.2/lib/pathutil/helpers.rb:11
  def allowed; end

  # --
  # Wraps around YAML and SafeYAML to provide alternatives to Rubies.
  # --
  #
  # @note We default aliases to yes so we can detect if you explicit true.
  # @return Hash
  #
  # source://pathutil-0.16.2/lib/pathutil/helpers.rb:27
  def load_yaml(data, safe: T.unsafe(nil), whitelist_classes: T.unsafe(nil), whitelist_symbols: T.unsafe(nil), aliases: T.unsafe(nil)); end

  # --
  # Make a temporary name suitable for temporary files and directories.
  # --
  #
  # @return String
  #
  # source://pathutil-0.16.2/lib/pathutil/helpers.rb:57
  def make_tmpname(prefix = T.unsafe(nil), suffix = T.unsafe(nil), root = T.unsafe(nil)); end

  private

  # source://pathutil-0.16.2/lib/pathutil/helpers.rb:69
  def __make_tmpname(_arg0, number); end

  # source://pathutil-0.16.2/lib/pathutil/helpers.rb:118
  def setup_safe_yaml(whitelist_classes, aliases); end

  # @raise [ArgumentError]
  #
  # source://pathutil-0.16.2/lib/pathutil/helpers.rb:81
  def tmpname_agerr(type, val); end

  # source://pathutil-0.16.2/lib/pathutil/helpers.rb:98
  def tmpname_prefix(prefix); end

  # source://pathutil-0.16.2/lib/pathutil/helpers.rb:87
  def tmpname_suffix(suffix); end
end
