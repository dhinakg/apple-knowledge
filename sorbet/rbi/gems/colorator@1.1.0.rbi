# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `colorator` gem.
# Please instead update this file by running `bin/tapioca gem colorator`.

# source://colorator-1.1.0/lib/colorator.rb:3
module Colorator
  private

  # --------------------------------------------------------------------------
  # Jump the cursor, moving it up and then back down to it's spot, allowing
  # you to do fancy things like multiple output (downloads) the way that Docker
  # does them in an async way without breaking term.
  # --------------------------------------------------------------------------
  #
  # source://colorator-1.1.0/lib/colorator.rb:38
  def ansi_jump(str, num); end

  # --------------------------------------------------------------------------
  #
  # source://colorator-1.1.0/lib/colorator.rb:54
  def clear_line(str = T.unsafe(nil)); end

  # --------------------------------------------------------------------------
  # Clear the screen's current view, so the user gets a clean output.
  # --------------------------------------------------------------------------
  #
  # source://colorator-1.1.0/lib/colorator.rb:74
  def clear_screen(str = T.unsafe(nil)); end

  # --------------------------------------------------------------------------
  #
  # source://colorator-1.1.0/lib/colorator.rb:82
  def colorize(str = T.unsafe(nil), color); end

  # --------------------------------------------------------------------------
  # Allows you to check if a string currently has ansi.
  # --------------------------------------------------------------------------
  #
  # source://colorator-1.1.0/lib/colorator.rb:26
  def has_ansi?(str); end

  # --------------------------------------------------------------------------
  #
  # source://colorator-1.1.0/lib/colorator.rb:46
  def reset_ansi(str = T.unsafe(nil)); end

  # --------------------------------------------------------------------------
  # Strip ANSI from the current string, making it just a normal string.
  # --------------------------------------------------------------------------
  #
  # source://colorator-1.1.0/lib/colorator.rb:64
  def strip_ansi(str); end

  class << self
    # --------------------------------------------------------------------------
    # Jump the cursor, moving it up and then back down to it's spot, allowing
    # you to do fancy things like multiple output (downloads) the way that Docker
    # does them in an async way without breaking term.
    # --------------------------------------------------------------------------
    #
    # source://colorator-1.1.0/lib/colorator.rb:38
    def ansi_jump(str, num); end

    # source://colorator-1.1.0/lib/colorator.rb:89
    def black(str); end

    # source://colorator-1.1.0/lib/colorator.rb:89
    def blue(str); end

    # source://colorator-1.1.0/lib/colorator.rb:89
    def bold(str); end

    # --------------------------------------------------------------------------
    #
    # source://colorator-1.1.0/lib/colorator.rb:54
    def clear_line(str = T.unsafe(nil)); end

    # --------------------------------------------------------------------------
    # Clear the screen's current view, so the user gets a clean output.
    # --------------------------------------------------------------------------
    #
    # source://colorator-1.1.0/lib/colorator.rb:74
    def clear_screen(str = T.unsafe(nil)); end

    # --------------------------------------------------------------------------
    #
    # source://colorator-1.1.0/lib/colorator.rb:82
    def colorize(str = T.unsafe(nil), color); end

    # source://colorator-1.1.0/lib/colorator.rb:89
    def cyan(str); end

    # source://colorator-1.1.0/lib/colorator.rb:89
    def green(str); end

    # --------------------------------------------------------------------------
    # Allows you to check if a string currently has ansi.
    # --------------------------------------------------------------------------
    #
    # @return [Boolean]
    #
    # source://colorator-1.1.0/lib/colorator.rb:26
    def has_ansi?(str); end

    # --------------------------------------------------------------------------
    # Allows you to check if a string currently has ansi.
    # --------------------------------------------------------------------------
    #
    # @return [Boolean]
    #
    # source://colorator-1.1.0/lib/colorator.rb:26
    def has_color?(str); end

    # source://colorator-1.1.0/lib/colorator.rb:89
    def magenta(str); end

    # source://colorator-1.1.0/lib/colorator.rb:89
    def red(str); end

    # --------------------------------------------------------------------------
    #
    # source://colorator-1.1.0/lib/colorator.rb:46
    def reset_ansi(str = T.unsafe(nil)); end

    # --------------------------------------------------------------------------
    #
    # source://colorator-1.1.0/lib/colorator.rb:46
    def reset_color(str = T.unsafe(nil)); end

    # --------------------------------------------------------------------------
    # Strip ANSI from the current string, making it just a normal string.
    # --------------------------------------------------------------------------
    #
    # source://colorator-1.1.0/lib/colorator.rb:64
    def strip_ansi(str); end

    # --------------------------------------------------------------------------
    # Strip ANSI from the current string, making it just a normal string.
    # --------------------------------------------------------------------------
    #
    # source://colorator-1.1.0/lib/colorator.rb:64
    def strip_color(str); end

    # source://colorator-1.1.0/lib/colorator.rb:89
    def white(str); end

    # source://colorator-1.1.0/lib/colorator.rb:89
    def yellow(str); end
  end
end

# source://colorator-1.1.0/lib/colorator.rb:10
Colorator::ANSI_COLORS = T.let(T.unsafe(nil), Hash)

# --------------------------------------------------------------------------
#
# source://colorator-1.1.0/lib/colorator.rb:9
Colorator::ANSI_MATCHR = T.let(T.unsafe(nil), Regexp)

# --------------------------------------------------------------------------
#
# source://colorator-1.1.0/lib/colorator.rb:106
Colorator::CORE_METHODS = T.let(T.unsafe(nil), Array)

# source://colorator-1.1.0/lib/colorator.rb:5
Colorator::VERSION = T.let(T.unsafe(nil), String)
