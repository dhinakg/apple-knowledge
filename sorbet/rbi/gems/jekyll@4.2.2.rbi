# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jekyll` gem.
# Please instead update this file by running `bin/tapioca gem jekyll`.

# Public: Methods that generate a URL for a resource such as a Post or a Page.
#
# Examples
#
#   URL.new({
#     :template => /:categories/:title.html",
#     :placeholders => {:categories => "ruby", :title => "something"}
#   }).to_s
#
# source://jekyll-4.2.2/lib/jekyll.rb:42
module Jekyll
  class << self
    # Public: Generate a Jekyll configuration Hash by merging the default
    # options with anything in _config.yml, and adding the given options on top.
    #
    # override - A Hash of config directives that override any options in both
    #            the defaults and the config file.
    #            See Jekyll::Configuration::DEFAULTS for a
    #            list of option names and their defaults.
    #
    # Returns the final configuration Hash.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:114
    def configuration(override = T.unsafe(nil)); end

    # Public: Tells you which Jekyll environment you are building in so you can skip tasks
    # if you need to.  This is useful when doing expensive compression tasks on css and
    # images and allows you to skip that when working in development.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:101
    def env; end

    # Public: Fetch the logger instance for this Jekyll process.
    #
    # Returns the LogAdapter instance.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:145
    def logger; end

    # Public: Set the log writer.
    #         New log writer must respond to the same methods
    #         as Ruby's interal Logger.
    #
    # writer - the new Logger-compatible log transport
    #
    # Returns the new logger.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:156
    def logger=(writer); end

    # Public: Ensures the questionable path is prefixed with the base directory
    #         and prepends the questionable path with the base directory if false.
    #
    # base_directory - the directory with which to prefix the questionable path
    # questionable_path - the path we're unsure about, and want prefixed
    #
    # Returns the sanitized path.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:174
    def sanitized_path(base_directory, questionable_path); end

    # Public: Set the TZ environment variable to use the timezone specified
    #
    # timezone - the IANA Time Zone
    #
    # Returns nothing
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:133
    def set_timezone(timezone); end

    # Public: An array of sites
    #
    # Returns the Jekyll sites created.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:163
    def sites; end
  end
end

# source://jekyll-4.2.2/lib/jekyll/cache.rb:6
class Jekyll::Cache
  # Get an existing named cache, or create a new one if none exists
  #
  # name - name of the cache
  #
  # Returns nothing.
  #
  # @return [Cache] a new instance of Cache
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:66
  def initialize(name); end

  # Retrieve a cached item
  # Raises if key does not exist in cache
  #
  # Returns cached value
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:81
  def [](key); end

  # Add an item to cache
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:95
  def []=(key, value); end

  # Clear this particular cache
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:72
  def clear; end

  # Remove one particular item from the cache
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:119
  def delete(key); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:138
  def disk_cache_enabled?; end

  # If an item already exists in the cache, retrieve it.
  # Else execute code block, and add the result to the cache, and return that result.
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:108
  def getset(key); end

  # Check if `key` already exists in this cache
  #
  # Returns true if key exists in the cache, false otherwise
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:127
  def key?(key); end

  private

  # Remove all this caches items from disk
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:160
  def delete_cache_files; end

  # Given a path and a value, save value to disk at path.
  # This should NEVER be called in Safe Mode
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:181
  def dump(path, value); end

  # Given a key, return a SHA2 hash that can be used for caching this item to disk.
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:153
  def hash(key); end

  # Load `path` from disk and return the result.
  # This MUST NEVER be called in Safe Mode
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:167
  def load(path); end

  # Given a hashed key, return the path to where this item would be saved on disk.
  #
  # source://jekyll-4.2.2/lib/jekyll/cache.rb:145
  def path_to(hash = T.unsafe(nil)); end

  class << self
    # class-wide base cache reader
    #
    # source://jekyll-4.2.2/lib/jekyll/cache.rb:21
    def base_cache; end

    # class-wide cache location
    #
    # source://jekyll-4.2.2/lib/jekyll/cache.rb:15
    def cache_dir; end

    # class-wide cache location
    #
    # source://jekyll-4.2.2/lib/jekyll/cache.rb:15
    def cache_dir=(_arg0); end

    # Clear all caches
    #
    # source://jekyll-4.2.2/lib/jekyll/cache.rb:29
    def clear; end

    # Compare the current config to the cached config
    # If they are different, clear all caches
    #
    # Returns nothing.
    #
    # source://jekyll-4.2.2/lib/jekyll/cache.rb:38
    def clear_if_config_changed(config); end

    # Disable Marshaling cached items to disk
    #
    # source://jekyll-4.2.2/lib/jekyll/cache.rb:24
    def disable_disk_cache!; end

    # class-wide directive to write cache to disk
    #
    # source://jekyll-4.2.2/lib/jekyll/cache.rb:18
    def disk_cache_enabled; end

    private

    # Delete all cached items from all caches
    #
    # Returns nothing.
    #
    # source://jekyll-4.2.2/lib/jekyll/cache.rb:54
    def delete_cache_files; end
  end
end

# Handles the cleanup of a site's destination before it is built.
#
# source://jekyll-4.2.2/lib/jekyll/cleaner.rb:5
class Jekyll::Cleaner
  # @return [Cleaner] a new instance of Cleaner
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:9
  def initialize(site); end

  # Cleans up the site's destination directory
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:14
  def cleanup!; end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:7
  def site; end

  private

  # Private: The list of existing files, apart from those included in
  # keep_files and hidden files.
  #
  # Returns a Set with the file paths
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:41
  def existing_files; end

  # Private: The list of directories that need to be kept because they are
  # parent directories of files specified in keep_files
  #
  # Returns a Set with the directory paths
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:96
  def keep_dirs; end

  # Private: Creates a regular expression from the config's keep_files array
  #
  # Examples
  #   ['.git','.svn'] with site.dest "/myblog/_site" creates
  #   the following regex: /\A\/myblog\/_site\/(\.git|\/.svn)/
  #
  # Returns the regular expression
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:107
  def keep_file_regex; end

  # Private: The metadata file storing dependency tree and build history
  #
  # Returns an Array with the metdata file as the only item
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:33
  def metadata_file; end

  # Private: The list of directories to be created when site is built.
  # These are the parent directories of the files in #new_files.
  #
  # Returns a Set with the directory paths
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:68
  def new_dirs; end

  # Private: The list of files to be created when site is built.
  #
  # Returns a Set with the file paths
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:58
  def new_files; end

  # Private: The list of files and directories to be deleted during cleanup process
  #
  # Returns an Array of the file and directory paths
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:24
  def obsolete_files; end

  # Private: The list of parent directories of a given file
  #
  # Returns an Array with the directory paths
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:75
  def parent_dirs(file); end

  # Private: The list of existing files that will be replaced by a directory
  # during build
  #
  # Returns a Set with the file paths
  #
  # source://jekyll-4.2.2/lib/jekyll/cleaner.rb:88
  def replaced_files; end
end

# source://jekyll-4.2.2/lib/jekyll/cleaner.rb:6
Jekyll::Cleaner::HIDDEN_FILE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/collection.rb:4
class Jekyll::Collection
  # Create a new Collection.
  #
  # site - the site to which this collection belongs.
  # label - the name of the collection
  #
  # Returns nothing.
  #
  # @return [Collection] a new instance of Collection
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:14
  def initialize(site, label); end

  # The full path to the directory containing the collection, with
  #   optional subpaths.
  #
  # *files - (optional) any other path pieces relative to the
  #           directory to append to the path
  #
  # Returns a String containing th directory name where the collection
  #   is stored on the filesystem.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:130
  def collection_dir(*files); end

  # The full path to the directory containing the collection.
  #
  # Returns a String containing th directory name where the collection
  #   is stored on the filesystem.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:116
  def directory; end

  # Fetch the Documents in this collection.
  # Defaults to an empty array if no documents have been read in.
  #
  # Returns an array of Jekyll::Document objects.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:24
  def docs; end

  # Sets the attribute _docs
  #
  # @param value the value to set the attribute docs to.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:6
  def docs=(_arg0); end

  # All the entries in this collection.
  #
  # Returns an Array of file paths to the documents in this collection
  #   relative to the collection's directory
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:75
  def entries; end

  # The entry filter for this collection.
  # Creates an instance of Jekyll::EntryFilter.
  #
  # Returns the instance of Jekyll::EntryFilter for this collection.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:150
  def entry_filter; end

  # Checks whether the directory "exists" for this collection.
  # The directory must exist on the filesystem and must not be a symlink
  #   if in safe mode.
  #
  # Returns false if the directory doesn't exist or if it's a symlink
  #   and we're in safe mode.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:142
  def exists?; end

  # Extract options for this collection from the site configuration.
  #
  # Returns the metadata for this collection
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:202
  def extract_metadata; end

  # Fetch the static files in this collection.
  # Defaults to an empty array if no static files have been read in.
  #
  # Returns an array of Jekyll::StaticFile objects.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:50
  def files; end

  # Filtered version of the entries in this collection.
  # See `Jekyll::EntryFilter#filter` for more information.
  #
  # Returns a list of filtered entry paths.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:91
  def filtered_entries; end

  # An inspect string.
  #
  # Returns the inspect string
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:157
  def inspect; end

  # Returns the value of attribute label.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:5
  def label; end

  # Returns the value of attribute metadata.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:5
  def metadata; end

  # Override of method_missing to check in @data for the key.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:35
  def method_missing(method, *args, &blck); end

  # Read the allowed documents into the collection's array of _docs.
  #
  # Returns the sorted array of _docs.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:57
  def read; end

  # The directory for this Collection, relative to the site source or the directory
  # containing the collection.
  #
  # Returns a String containing the directory name where the collection
  #   is stored on the filesystem.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:108
  def relative_directory; end

  # Produce a sanitized label name
  # Label names may not contain anything but alphanumeric characters,
  #   underscores, and hyphens.
  #
  # label - the possibly-unsafe label
  #
  # Returns a sanitized version of the label.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:168
  def sanitize_label(label); end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:5
  def site; end

  # Produce a representation of this Collection for use in Liquid.
  # Exposes two attributes:
  #   - label
  #   - _docs
  #
  # Returns a representation of this collection for use in Liquid.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:178
  def to_liquid; end

  # The URL template to render collection's documents at.
  #
  # Returns the URL template to render collection's documents at.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:193
  def url_template; end

  # Whether the collection's documents ought to be written as individual
  #   files in the output.
  #
  # Returns true if the 'write' metadata is true, false otherwise.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:186
  def write?; end

  private

  # source://jekyll-4.2.2/lib/jekyll/collection.rb:212
  def container; end

  # source://jekyll-4.2.2/lib/jekyll/collection.rb:252
  def determine_sort_order(sort_key, apples, olives); end

  # source://jekyll-4.2.2/lib/jekyll/collection.rb:265
  def order_with_warning(sort_key, document, order); end

  # source://jekyll-4.2.2/lib/jekyll/collection.rb:216
  def read_document(full_path); end

  # source://jekyll-4.2.2/lib/jekyll/collection.rb:294
  def read_static_file(file_path, full_path); end

  # Rearrange documents within the `_docs` array as listed in the `metadata["order"]` array.
  #
  # Involves converting the two arrays into hashes based on relative_paths as keys first, then
  # merging them to remove duplicates and finally retrieving the Document instances from the
  # merged array.
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:275
  def rearrange_docs!; end

  # Override of normal respond_to? to match method_missing's logic for
  # looking in @data.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:30
  def respond_to_missing?(method, include_private = T.unsafe(nil)); end

  # source://jekyll-4.2.2/lib/jekyll/collection.rb:222
  def sort_docs!; end

  # A custom sort function based on Schwartzian transform
  # Refer https://byparker.com/blog/2017/schwartzian-transform-faster-sorting/ for details
  #
  # source://jekyll-4.2.2/lib/jekyll/collection.rb:234
  def sort_docs_by_key!; end
end

# source://jekyll-4.2.2/lib/jekyll/readers/collection_reader.rb:4
class Jekyll::CollectionReader
  # @return [CollectionReader] a new instance of CollectionReader
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/collection_reader.rb:9
  def initialize(site); end

  # Returns the value of attribute content.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/collection_reader.rb:7
  def content; end

  # Read in all collections specified in the configuration
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/collection_reader.rb:17
  def read; end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/collection_reader.rb:7
  def site; end
end

# source://jekyll-4.2.2/lib/jekyll/readers/collection_reader.rb:5
Jekyll::CollectionReader::SPECIAL_COLLECTIONS = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/command.rb:4
class Jekyll::Command
  class << self
    # Add common options to a command for building configuration
    #
    # cmd - the Jekyll::Command to add these options to
    #
    # Returns nothing
    #
    # source://jekyll-4.2.2/lib/jekyll/command.rb:53
    def add_build_options(cmd); end

    # Create a full Jekyll configuration with the options passed in as overrides
    #
    # options - the configuration overrides
    #
    # Returns a full Jekyll configuration
    #
    # source://jekyll-4.2.2/lib/jekyll/command.rb:41
    def configuration_from_options(options); end

    # Keep a list of subclasses of Jekyll::Command every time it's inherited
    # Called automatically.
    #
    # base - the subclass
    #
    # Returns nothing
    #
    # source://jekyll-4.2.2/lib/jekyll/command.rb:17
    def inherited(base); end

    # Run Site#process and catch errors
    #
    # site - the Jekyll::Site object
    #
    # Returns nothing
    #
    # source://jekyll-4.2.2/lib/jekyll/command.rb:27
    def process_site(site); end

    # Run ::process method in a given set of Jekyll::Command subclasses and suggest
    # re-running the associated command with --trace switch to obtain any additional
    # information or backtrace regarding the encountered Exception.
    #
    # cmd     - the Jekyll::Command to be handled
    # options - configuration overrides
    # klass   - an array of Jekyll::Command subclasses associated with the command
    #
    # Note that all exceptions are rescued..
    #
    # source://jekyll-4.2.2/lib/jekyll/command.rb:90
    def process_with_graceful_fail(cmd, options, *klass); end

    # A list of subclasses of Jekyll::Command
    #
    # source://jekyll-4.2.2/lib/jekyll/command.rb:7
    def subclasses; end
  end
end

# source://jekyll-4.2.2/lib/jekyll/commands/build.rb:4
module Jekyll::Commands; end

# source://jekyll-4.2.2/lib/jekyll/commands/build.rb:5
class Jekyll::Commands::Build < ::Jekyll::Command
  class << self
    # Build your Jekyll site.
    #
    # site - the Jekyll::Site instance to build
    # options - A Hash of options passed to the command
    #
    # Returns nothing.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/build.rb:55
    def build(site, options); end

    # Create the Mercenary command for the Jekyll CLI for this Command
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/build.rb:8
    def init_with_program(prog); end

    # Build your jekyll site
    # Continuously watch if `watch` is set to true in the config.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/build.rb:25
    def process(options); end

    # Private: Watch for file changes and rebuild the site.
    #
    # site - A Jekyll::Site instance
    # options - A Hash of options passed to the command
    #
    # Returns nothing.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/build.rb:75
    def watch(site, options); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/commands/clean.rb:5
class Jekyll::Commands::Clean < ::Jekyll::Command
  class << self
    # source://jekyll-4.2.2/lib/jekyll/commands/clean.rb:7
    def init_with_program(prog); end

    # source://jekyll-4.2.2/lib/jekyll/commands/clean.rb:21
    def process(options); end

    # source://jekyll-4.2.2/lib/jekyll/commands/clean.rb:34
    def remove(filename, checker_func: T.unsafe(nil)); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:5
class Jekyll::Commands::Doctor < ::Jekyll::Command
  class << self
    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:68
    def conflicting_urls(site); end

    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:60
    def deprecated_relative_permalinks(site); end

    # @return [Boolean]
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:84
    def fsnotify_buggy?(_site); end

    # @return [Boolean]
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:35
    def healthy?(site); end

    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:7
    def init_with_program(prog); end

    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:22
    def process(options); end

    # @return [Boolean]
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:115
    def proper_site_url?(site); end

    # @return [Boolean]
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:46
    def properly_gathered_posts?(site); end

    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:101
    def urls_only_differ_by_case(site); end

    private

    # @return [Boolean]
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:137
    def allow_used_permalink?(item); end

    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:141
    def case_insensitive_urls(things, destination); end

    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:126
    def destination_map(site); end

    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:167
    def url_absolute(url); end

    # @return [Boolean]
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:148
    def url_exists?(url); end

    # @return [Boolean]
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/doctor.rb:156
    def url_valid?(url); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/commands/help.rb:5
class Jekyll::Commands::Help < ::Jekyll::Command
  class << self
    # source://jekyll-4.2.2/lib/jekyll/commands/help.rb:7
    def init_with_program(prog); end

    # source://jekyll-4.2.2/lib/jekyll/commands/help.rb:26
    def invalid_command(prog, cmd); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/commands/new.rb:7
class Jekyll::Commands::New < ::Jekyll::Command
  class << self
    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:44
    def blank_template; end

    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:48
    def create_blank_site(path); end

    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:9
    def init_with_program(prog); end

    # Internal: Gets the filename of the sample post to be created
    #
    # Returns the filename of the sample post, as a String
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:64
    def initialized_post_name; end

    # @raise [ArgumentError]
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:24
    def process(args, options = T.unsafe(nil)); end

    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:57
    def scaffold_post_content; end

    private

    # After a new blog has been created, print a success notification and
    # then automatically execute bundle install from within the new blog dir
    # unless the user opts to generate a blank blog or skip 'bundle install'.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:142
    def after_install(path, options = T.unsafe(nil)); end

    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:156
    def bundle_install(path); end

    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:124
    def create_sample_files(path); end

    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:108
    def create_site(new_blog_path); end

    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:70
    def gemfile_contents; end

    # @return [Boolean]
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:120
    def preserve_source_location?(path, options); end

    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:134
    def scaffold_path; end

    # source://jekyll-4.2.2/lib/jekyll/commands/new.rb:130
    def site_template; end
  end
end

# source://jekyll-4.2.2/lib/jekyll/commands/new_theme.rb:7
class Jekyll::Commands::NewTheme < ::Jekyll::Command
  class << self
    # source://jekyll-4.2.2/lib/jekyll/commands/new_theme.rb:9
    def init_with_program(prog); end

    # source://jekyll-4.2.2/lib/jekyll/commands/new_theme.rb:23
    def process(args, opts); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:9
class Jekyll::Commands::Serve < ::Jekyll::Command
  class << self
    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:61
    def init_with_program(prog); end

    # Returns the value of attribute mutex.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:58
    def mutex; end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:93
    def process(opts); end

    # Returns the value of attribute run_cond.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:58
    def run_cond; end

    # Returns the value of attribute running.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:58
    def running; end

    # Returns the value of attribute running.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:58
    def running?; end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:105
    def shutdown; end

    private

    # Keep in our area with a thread or detach the server as requested
    # by the user.  This method determines what we do based on what you
    # ask us to do.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:272
    def boot_or_detach(server, opts); end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:250
    def default_url(opts); end

    # Make the stack verbose if the user requests it.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:290
    def enable_logging(opts); end

    # Add SSL to the stack if the user triggers --enable-ssl and they
    # provide both types of certificates commonly needed.  Raise if they
    # forget to add one of the certificates.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:299
    def enable_ssl(opts); end

    # Recreate NondisclosureName under utf-8 circumstance
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:224
    def file_handler_opts; end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:242
    def format_url(ssl_enabled, address, port, baseurl = T.unsafe(nil)); end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:259
    def launch_browser(server, opts); end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:351
    def mime_types; end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:356
    def read_file(source_dir, file_path); end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:142
    def register_reload_hooks(opts); end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:233
    def server_address(server, options = T.unsafe(nil)); end

    # Do a base pre-setup of WEBRick so that everything is in place
    # when we get ready to party, checking for an setting up an error page
    # and making sure our destination exists.
    #
    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:178
    def setup(destination); end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:322
    def start_callback(detached); end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:212
    def start_up_webrick(opts, destination); end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:336
    def stop_callback(detached); end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:113
    def validate_options(opts); end

    # source://jekyll-4.2.2/lib/jekyll/commands/serve.rb:192
    def webrick_opts(opts); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/configuration.rb:6
class Jekyll::Configuration < ::Hash
  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:230
  def add_default_collections; end

  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:262
  def add_default_excludes; end

  # Public: Generate list of configuration files from the override
  #
  # override - the command-line options hash
  #
  # Returns an Array of config files
  #
  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:141
  def config_files(override); end

  # Public: Split a CSV string into an array containing its values
  #
  # csv - the string of comma-separated values
  #
  # Returns an array of the values contained in the CSV
  #
  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:214
  def csv_to_array(csv); end

  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:100
  def get_config_value_with_override(config_key, override); end

  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:113
  def quiet(override = T.unsafe(nil)); end

  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:113
  def quiet?(override = T.unsafe(nil)); end

  # Public: Read configuration and return merged Hash
  #
  # file - the path to the YAML file to be read in
  #
  # Returns this configuration, overridden by the values in the file
  #
  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:165
  def read_config_file(file); end

  # Public: Read in a list of configuration files and merge with this hash
  #
  # files - the list of configuration file paths
  #
  # Returns the full configuration, with the defaults overridden by the values in the
  # configuration files
  #
  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:191
  def read_config_files(files); end

  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:123
  def safe_load_file(filename); end

  # Public: Directory of the Jekyll source folder
  #
  # override - the command-line options hash
  #
  # Returns the path to the Jekyll source directory
  #
  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:109
  def source(override); end

  # Public: Turn all keys into string
  #
  # Return a copy of the hash where all its keys are strings
  #
  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:96
  def stringify_keys; end

  # Public: Ensure the proper options are set in the configuration
  #
  # Returns the configuration Hash
  #
  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:221
  def validate; end

  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:118
  def verbose(override = T.unsafe(nil)); end

  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:118
  def verbose?(override = T.unsafe(nil)); end

  private

  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:286
  def check_include_exclude(config); end

  # Private: Checks if the `plugins` config is a String
  #
  # config - the config hash
  #
  # Raises a Jekyll::Errors::InvalidConfigurationError if the config `plugins`
  # is not an Array.
  #
  # @raise [Jekyll::Errors::InvalidConfigurationError]
  #
  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:302
  def check_plugins(config); end

  # source://jekyll-4.2.2/lib/jekyll/configuration.rb:282
  def style_to_permalink(permalink_style); end

  class << self
    # Static: Produce a Configuration ready for use in a Site.
    # It takes the input, fills in the defaults where values do not exist.
    #
    # user_config - a Hash or Configuration of overrides.
    #
    # Returns a Configuration filled with defaults.
    #
    # source://jekyll-4.2.2/lib/jekyll/configuration.rb:87
    def from(user_config); end
  end
end

# Default options. Overridden by values in _config.yml.
# Strings rather than symbols are used for compatibility with YAML.
#
# source://jekyll-4.2.2/lib/jekyll/configuration.rb:7
Jekyll::Configuration::DEFAULTS = T.let(T.unsafe(nil), Jekyll::Configuration)

# source://jekyll-4.2.2/lib/jekyll/configuration.rb:255
Jekyll::Configuration::DEFAULT_EXCLUDES = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/configuration.rb:272
Jekyll::Configuration::STYLE_TO_PERMALINK = T.let(T.unsafe(nil), Hash)

# source://jekyll-4.2.2/lib/jekyll/converter.rb:11
class Jekyll::Converter < ::Jekyll::Plugin
  # Initialize the converter.
  #
  # Returns an initialized Converter.
  #
  # @return [Converter] a new instance of Converter
  #
  # source://jekyll-4.2.2/lib/jekyll/converter.rb:36
  def initialize(config = T.unsafe(nil)); end

  # Get the highlighter prefix.
  #
  # Returns the String prefix.
  #
  # source://jekyll-4.2.2/lib/jekyll/converter.rb:43
  def highlighter_prefix; end

  # Get the highlighter suffix.
  #
  # Returns the String suffix.
  #
  # source://jekyll-4.2.2/lib/jekyll/converter.rb:50
  def highlighter_suffix; end

  class << self
    # Public: Get or set the highlighter prefix. When an argument is specified,
    # the prefix will be set. If no argument is specified, the current prefix
    # will be returned.
    #
    # highlighter_prefix - The String prefix (default: nil).
    #
    # Returns the String prefix.
    #
    # source://jekyll-4.2.2/lib/jekyll/converter.rb:12
    def highlighter_prefix(highlighter_prefix = T.unsafe(nil)); end

    # Public: Get or set the highlighter suffix. When an argument is specified,
    # the suffix will be set. If no argument is specified, the current suffix
    # will be returned.
    #
    # highlighter_suffix - The String suffix (default: nil).
    #
    # Returns the String suffix.
    #
    # source://jekyll-4.2.2/lib/jekyll/converter.rb:26
    def highlighter_suffix(highlighter_suffix = T.unsafe(nil)); end

    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:24
    def inherited(const_); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/converters/identity.rb:4
module Jekyll::Converters; end

# Identity converter. Returns same content as given.
# For more info on converters see https://jekyllrb.com/docs/plugins/converters/
#
# source://jekyll-4.2.2/lib/jekyll/converters/identity.rb:7
class Jekyll::Converters::Identity < ::Jekyll::Converter
  # Logic to do the content conversion.
  #
  # content - String content of file (without front matter).
  #
  # Returns a String of the converted content.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/identity.rb:36
  def convert(content); end

  # Public: Does the given extension match this converter's list of acceptable extensions?
  # Takes one argument: the file's extension (including the dot).
  #
  # _ext - The String extension to check (not relevant here)
  #
  # Returns true since it always matches.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/identity.rb:18
  def matches(_ext); end

  # Public: The extension to be given to the output file (including the dot).
  #
  # ext - The String extension or original file.
  #
  # Returns The String output file extension.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/identity.rb:27
  def output_ext(ext); end

  class << self
    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:24
    def inherited(const_); end
  end
end

# Markdown converter.
# For more info on converters see https://jekyllrb.com/docs/plugins/converters/
#
# source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:7
class Jekyll::Converters::Markdown < ::Jekyll::Converter
  # Logic to do the content conversion.
  #
  # content - String content of file (without front matter).
  #
  # Returns a String of the converted content.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:83
  def convert(content); end

  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:90
  def extname_list; end

  # RuboCop does not allow reader methods to have names starting with `get_`
  # To ensure compatibility, this check has been disabled on this method
  #
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:35
  def get_processor; end

  # Does the given extension match this converter's list of acceptable extensions?
  # Takes one argument: the file's extension (including the dot).
  #
  # ext - The String extension to check.
  #
  # Returns true if it matches, false otherwise.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:65
  def matches(ext); end

  # Public: The extension to be given to the output file (including the dot).
  #
  # ext - The String extension or original file.
  #
  # Returns The String output file extension.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:74
  def output_ext(_ext); end

  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:12
  def setup; end

  # Public: A list of processors that you provide via plugins.
  #
  # Returns an array of symbols
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:55
  def third_party_processors; end

  # Public: Provides you with a list of processors comprised of the ones we support internally
  # and the ones that you have provided to us (if they're whitelisted for use in safe mode).
  #
  # Returns an array of symbols.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:48
  def valid_processors; end

  private

  # Private: Determine whether a class name is an allowed custom
  #   markdown class name.
  #
  # parser_name - the name of the parser class
  #
  # Returns true if the parser name contains only alphanumeric characters and is defined
  # within Jekyll::Converters::Markdown
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:108
  def custom_class_allowed?(parser_name); end

  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:96
  def custom_processor; end

  class << self
    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:24
    def inherited(const_); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:74
class Jekyll::Converters::Markdown::KramdownParser
  # @return [KramdownParser] a new instance of KramdownParser
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:84
  def initialize(config); end

  # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:108
  def convert(content); end

  # Setup and normalize the configuration:
  #   * Create Kramdown if it doesn't exist.
  #   * Set syntax_highlighter, detecting enable_coderay and merging
  #       highlighter if none.
  #   * Merge kramdown[coderay] into syntax_highlighter_opts stripping coderay_.
  #   * Make sure `syntax_highlighter_opts` exists.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:99
  def setup; end

  private

  # config[kramdown][syntax_higlighter] >
  #   config[kramdown][enable_coderay] >
  #   config[highlighter]
  # Where `enable_coderay` is now deprecated because Kramdown
  # supports Rouge now too.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:140
  def highlighter; end

  # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:121
  def load_dependencies; end

  # If our highlighter is CodeRay we go in to merge the CodeRay defaults
  # with your "coderay" key if it's there, deprecating it in the
  # process of you using it.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:180
  def modernize_coderay_config; end

  # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:163
  def strip_coderay_prefix(hash); end
end

# source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:75
Jekyll::Converters::Markdown::KramdownParser::CODERAY_DEFAULTS = T.let(T.unsafe(nil), Hash)

# SmartyPants converter.
# For more info on converters see https://jekyllrb.com/docs/plugins/converters/
#
# source://jekyll-4.2.2/lib/jekyll/converters/smartypants.rb:24
class Jekyll::Converters::SmartyPants < ::Jekyll::Converter
  # @return [SmartyPants] a new instance of SmartyPants
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/smartypants.rb:28
  def initialize(config); end

  # Logic to do the content conversion.
  #
  # content - String content of file (without front matter).
  #
  # Returns a String of the converted content.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/smartypants.rb:58
  def convert(content); end

  # Does the given extension match this converter's list of acceptable extensions?
  # Takes one argument: the file's extension (including the dot).
  #
  # ext - The String extension to check.
  #
  # Returns true if it matches, false otherwise.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/smartypants.rb:40
  def matches(_ext); end

  # Public: The extension to be given to the output file (including the dot).
  #
  # ext - The String extension or original file.
  #
  # Returns The String output file extension.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/smartypants.rb:49
  def output_ext(_ext); end

  class << self
    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:24
    def inherited(const_); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/convertible.rb:18
module Jekyll::Convertible
  # Accessor for data properties by Liquid.
  #
  # property - The String name of the property to retrieve.
  #
  # Returns the String value or nil if the property isn't included.
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:235
  def [](property); end

  # Determine whether the document is an asset file.
  # Asset files include CoffeeScript files and Sass/SCSS files.
  #
  # Returns true if the extname belongs to the set of extensions
  #   that asset files use.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:141
  def asset_file?; end

  # Determine whether the document is a CoffeeScript file.
  #
  # Returns true if extname == .coffee, false otherwise.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:155
  def coffeescript_file?; end

  # Determine which converter to use based on this convertible's
  # extension.
  #
  # Returns the Converter instance.
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:96
  def converters; end

  # Add any necessary layouts to this convertible document.
  #
  # payload - The site payload Drop or Hash.
  # layouts - A Hash of {"name" => "layout"}.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:205
  def do_layout(payload, layouts); end

  # returns the owner symbol for hook triggering
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:132
  def hook_owner; end

  # Checks if the layout specified in the document actually exists
  #
  # layout - the layout to check
  #
  # Returns true if the layout is invalid, false if otherwise
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:181
  def invalid_layout?(layout); end

  # Determine the extension depending on content_type.
  #
  # Returns the String extension for the output file.
  #   e.g. ".html" for an HTML output file.
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:88
  def output_ext; end

  # Determine whether the file should be placed into layouts.
  #
  # Returns false if the document is an asset file or if the front matter
  #   specifies `layout: none`
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:172
  def place_in_layout?; end

  # Whether the file is published or not, as indicated in YAML front-matter
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:25
  def published?; end

  # Read the YAML frontmatter.
  #
  # base - The String path to the dir containing the file.
  # name - The String filename of the file.
  # opts - optional parameter to File.read, default at site configs
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:37
  def read_yaml(base, name, opts = T.unsafe(nil)); end

  # Recursively render layouts
  #
  # layouts - a list of the layouts
  # payload - the payload for Liquid
  # info    - the info for Liquid
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:192
  def render_all_layouts(layouts, payload, info); end

  # Render Liquid in the content
  #
  # content - the raw Liquid content to render
  # payload - the payload for Liquid
  # info    - the info for Liquid
  #
  # Returns the converted content
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:107
  def render_liquid(content, payload, info, path); end

  # Determine whether the file should be rendered with Liquid.
  #
  # Returns true if the file has Liquid Tags or Variables, false otherwise.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:162
  def render_with_liquid?; end

  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:243
  def renderer; end

  # Determine whether the document is a Sass file.
  #
  # Returns true if extname == .sass or .scss, false otherwise.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:148
  def sass_file?; end

  # Convert this Convertible's data to a Hash suitable for use by Liquid.
  #
  # Returns the Hash representation of this Convertible.
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:114
  def to_liquid(attrs = T.unsafe(nil)); end

  # Returns the contents as a String.
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:20
  def to_s; end

  # Transform the contents based on the content type.
  #
  # Returns the transformed contents.
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:80
  def transform; end

  # The type of a document,
  #   i.e., its classname downcase'd and to_sym'd.
  #
  # Returns the type of self.
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:127
  def type; end

  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:64
  def validate_data!(filename); end

  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:71
  def validate_permalink!(filename); end

  # Write the generated page file to the destination directory.
  #
  # dest - The String path to the destination dir.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:222
  def write(dest); end

  private

  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:249
  def defaults; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/convertible.rb:253
  def no_layout?; end
end

# source://jekyll-4.2.2/lib/jekyll/readers/data_reader.rb:4
class Jekyll::DataReader
  # @return [DataReader] a new instance of DataReader
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/data_reader.rb:7
  def initialize(site); end

  # Returns the value of attribute content.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/data_reader.rb:5
  def content; end

  # Read all the files in <dir> and adds them to @content
  #
  # dir - The String relative path of the directory to read.
  #
  # Returns @content, a Hash of the .yaml, .yml,
  # .json, and .csv files in the base directory
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/data_reader.rb:20
  def read(dir); end

  # Determines how to read a data file.
  #
  # Returns the contents of the data file.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/data_reader.rb:56
  def read_data_file(path); end

  # Read and parse all .yaml, .yml, .json, .csv and .tsv
  # files under <dir> and add them to the <data> variable.
  #
  # dir - The string absolute path of the directory to read.
  # data - The variable to which data will be added.
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/data_reader.rb:33
  def read_data_to(dir, data); end

  # source://jekyll-4.2.2/lib/jekyll/readers/data_reader.rb:74
  def sanitize_filename(name); end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/data_reader.rb:5
  def site; end
end

# source://jekyll-4.2.2/lib/jekyll/deprecator.rb:4
module Jekyll::Deprecator
  extend ::Jekyll::Deprecator

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/deprecator.rb:36
  def arg_is_present?(args, deprecated_argument, message); end

  # source://jekyll-4.2.2/lib/jekyll/deprecator.rb:44
  def defaults_deprecate_type(old, current); end

  # source://jekyll-4.2.2/lib/jekyll/deprecator.rb:40
  def deprecation_message(message); end

  # source://jekyll-4.2.2/lib/jekyll/deprecator.rb:27
  def no_subcommand(args); end

  # source://jekyll-4.2.2/lib/jekyll/deprecator.rb:7
  def process(args); end
end

# source://jekyll-4.2.2/lib/jekyll/document.rb:4
class Jekyll::Document
  include ::Comparable
  extend ::Forwardable

  # Create a new Document.
  #
  # path - the path to the file
  # relations - a hash with keys :site and :collection, the values of which
  #             are the Jekyll::Site and Jekyll::Collection to which this
  #             Document belong.
  #
  # Returns nothing.
  #
  # @return [Document] a new instance of Document
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:42
  def initialize(path, relations = T.unsafe(nil)); end

  # Compare this document against another document.
  # Comparison is a comparison between the 2 paths of the documents.
  #
  # Returns -1, 0, +1 or nil depending on whether this doc's path is less than,
  #   equal or greater than the other doc's path. See String#<=> for more details.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:342
  def <=>(other); end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:250
  def [](key); end

  # Determine whether the document is an asset file.
  # Asset files include CoffeeScript files and Sass/SCSS files.
  #
  # Returns true if the extname belongs to the set of extensions
  #   that asset files use.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:172
  def asset_file?; end

  # The base filename of the document.
  #
  # Returns the base filename of the document.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:132
  def basename; end

  # The base filename of the document, without the file extname.
  #
  # Returns the basename without the file extname.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:125
  def basename_without_ext; end

  # Add superdirectories of the special_dir to categories.
  # In the case of es/_posts, 'es' is added as a category.
  # In the case of _posts/es, 'es' is NOT added as a category.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:427
  def categories_from_path(special_dir); end

  # Produces a "cleaned" relative path.
  # The "cleaned" relative path is the relative path without the extname
  #   and with the collection's directory removed as well.
  # This method is useful when building the URL of the document.
  #
  # NOTE: `String#gsub` removes all trailing periods (in comparison to `String#chomp`)
  #
  # Examples:
  #   When relative_path is "_methods/site/generate...md":
  #     cleaned_relative_path
  #     # => "/site/generate"
  #
  # Returns the cleaned relative path of the document.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:153
  def cleaned_relative_path; end

  # Determine whether the document is a CoffeeScript file.
  #
  # Returns true if extname == .coffee, false otherwise.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:186
  def coffeescript_file?; end

  # Returns the value of attribute collection.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:8
  def collection; end

  # Returns the value of attribute content.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:9
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:9
  def content=(_arg0); end

  # Fetch the Document's data.
  #
  # Returns a Hash containing the data. An empty hash is returned if
  #   no data was read.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:68
  def data; end

  # Returns the document date. If metadata is not present then calculates it
  # based on Jekyll::Site#time or the document file modification time.
  #
  # Return document date string.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:86
  def date; end

  # The full path to the output file.
  #
  # base_directory - the base path of the output directory
  #
  # Returns the full path to the output file of this document.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:259
  def destination(base_directory); end

  # Returns whether the document is a draft. This is only the case if
  # the document is in the 'posts' collection but in a different
  # directory than '_posts'.
  #
  # Returns whether the document is a draft.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:102
  def draft?; end

  # The Document excerpt_separator, from the YAML Front-Matter or site
  # default excerpt_separator value
  #
  # Returns the document excerpt_separator
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:369
  def excerpt_separator; end

  # Returns the value of attribute extname.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:8
  def extname; end

  # Whether to generate an excerpt
  #
  # Returns true if the excerpt separator is configured.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:376
  def generate_excerpt?; end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:395
  def id; end

  # The inspect string for this document.
  # Includes the relative path and the collection label.
  #
  # Returns the inspect string for this document.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:326
  def inspect; end

  # Merge some data in with this document's data.
  #
  # Returns the merged data.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:75
  def merge_data!(other, source: T.unsafe(nil)); end

  # Override of method_missing to check in @data for the key.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:407
  def method_missing(method, *args, &blck); end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:380
  def next_doc; end

  # Determine whether the file should be rendered with a layout.
  #
  # Returns true if the Front Matter specifies that `layout` is set to `none`.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:204
  def no_layout?; end

  # Returns the value of attribute output.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:9
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:9
  def output=(_arg0); end

  # The output extension of the document.
  #
  # Returns the output extension
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:118
  def output_ext; end

  # Returns the value of attribute path.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:8
  def path; end

  # The permalink for this Document.
  # Permalink is set via the data Hash.
  #
  # Returns the permalink or nil if no permalink was set in the data.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:235
  def permalink; end

  # Determine whether the file should be placed into layouts.
  #
  # Returns false if the document is set to `layouts: none`, or is either an
  #   asset file or a yaml file. Returns true otherwise.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:212
  def place_in_layout?; end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:439
  def populate_categories; end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:450
  def populate_tags; end

  # source://RUBY_ROOT/forwardable.rb:229
  def post_read(*args, **_arg1, &block); end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:385
  def previous_doc; end

  # Whether the file is published or not, as indicated in YAML front-matter
  #
  # Returns 'false' if the 'published' key is specified in the
  # YAML front-matter and is 'false'. Otherwise returns 'true'.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:290
  def published?; end

  # Read in the file and assign the content and data based on the file contents.
  # Merge the frontmatter of the file with the frontmatter default
  # values
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:299
  def read(opts = T.unsafe(nil)); end

  # Calculate related posts.
  #
  # Returns an Array of related Posts.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:402
  def related_posts; end

  # The path to the document, relative to the collections_dir.
  #
  # Returns a String path which represents the relative path from the collections_dir
  # to this document.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:111
  def relative_path; end

  # Determine whether the file should be rendered with Liquid.
  #
  # Returns false if the document is either an asset file or a yaml file,
  #   or if the document doesn't contain any Liquid Tags or Variables,
  #   true otherwise.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:195
  def render_with_liquid?; end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:136
  def renderer; end

  # Determine whether the document is a Sass file.
  #
  # Returns true if extname == .sass or .scss, false otherwise.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:179
  def sass_file?; end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:8
  def site; end

  # Return document file modification time in the form of a Time object.
  #
  # Return document file modification Time object.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:93
  def source_file_mtime; end

  # Create a Liquid-understandable version of this Document.
  #
  # Returns a Hash representing this Document's data.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:318
  def to_liquid; end

  # The string representation for this document.
  #
  # Returns the content of the document
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:333
  def to_s; end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:390
  def trigger_hooks(hook_name, *args); end

  # Returns the value of attribute type.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:8
  def type; end

  # The computed URL for the document. See `Jekyll::URL#to_s` for more details.
  #
  # Returns the computed URL for the document.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:242
  def url; end

  # Construct a Hash of key-value pairs which contain a mapping between
  #   a key in the URL template and the corresponding value for this document.
  #
  # Returns the Hash of key-value pairs for replacement in the URL.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:227
  def url_placeholders; end

  # The URL template where the document would be accessible.
  #
  # Returns the URL template for the document.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:219
  def url_template; end

  # Write the generated Document file to the destination directory.
  #
  # dest - The String path to the destination dir.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:277
  def write(dest); end

  # Determine whether this document should be written.
  # Based on the Collection to which it belongs.
  #
  # True if the document has a collection and if that collection's #write?
  # method returns true, and if the site's Publisher will publish the document.
  # False otherwise.
  #
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:358
  def write?; end

  # Determine whether the document is a YAML file.
  #
  # Returns true if the extname is either .yml or .yaml, false otherwise.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:163
  def yaml_file?; end

  private

  # source://jekyll-4.2.2/lib/jekyll/document.rb:540
  def generate_excerpt; end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:499
  def handle_read_error(error); end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:459
  def merge_categories!(other); end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:469
  def merge_date!(source); end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:478
  def merge_defaults; end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:534
  def modify_date(date); end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:511
  def populate_title; end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:483
  def read_content(**opts); end

  # source://jekyll-4.2.2/lib/jekyll/document.rb:492
  def read_post_data; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/document.rb:418
  def respond_to_missing?(method, *_arg1); end

  class << self
    # Class-wide cache to stash and retrieve regexp to detect "super-directories"
    # of a particular Jekyll::Document object.
    #
    # dirname - The *special directory* for the Document.
    #           e.g. "_posts" or "_drafts" for Documents from the `site.posts` collection.
    #
    # source://jekyll-4.2.2/lib/jekyll/document.rb:27
    def superdirs_regex(dirname); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/document.rb:14
Jekyll::Document::DATELESS_FILENAME_MATCHER = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/document.rb:15
Jekyll::Document::DATE_FILENAME_MATCHER = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/document.rb:17
Jekyll::Document::SASS_FILE_EXTS = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/document.rb:18
Jekyll::Document::YAML_FILE_EXTS = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/document.rb:13
Jekyll::Document::YAML_FRONT_MATTER_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:4
module Jekyll::Drops; end

# source://jekyll-4.2.2/lib/jekyll/drops/collection_drop.rb:5
class Jekyll::Drops::CollectionDrop < ::Jekyll::Drops::Drop
  extend ::Forwardable

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def directory; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def docs; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def files; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def label; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:72
  def output; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def relative_directory; end

  # source://jekyll-4.2.2/lib/jekyll/drops/collection_drop.rb:15
  def to_s; end

  private

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:72
  def fallback_data; end
end

# source://jekyll-4.2.2/lib/jekyll/drops/document_drop.rb:5
class Jekyll::Drops::DocumentDrop < ::Jekyll::Drops::Drop
  extend ::Forwardable

  # source://jekyll-4.2.2/lib/jekyll/drops/document_drop.rb:28
  def <=>(other); end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:91
  def categories; end

  # Generate a Hash which breaks the recursive chain.
  # Certain fields which are normally available are omitted.
  #
  # Returns a Hash with only non-recursive fields present.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/document_drop.rb:63
  def collapse_document(doc); end

  # source://jekyll-4.2.2/lib/jekyll/drops/document_drop.rb:20
  def collection; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def content; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def date; end

  # source://jekyll-4.2.2/lib/jekyll/drops/document_drop.rb:24
  def excerpt; end

  # Generate a Hash for use in generating JSON.
  # This is useful if fields need to be cleared before the JSON can generate.
  #
  # state - the JSON::State object which determines the state of current processing.
  #
  # Returns a Hash ready for JSON generation.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/document_drop.rb:50
  def hash_for_json(state = T.unsafe(nil)); end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def id; end

  # source://jekyll-4.2.2/lib/jekyll/drops/document_drop.rb:40
  def next; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def output; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:72
  def path; end

  # source://jekyll-4.2.2/lib/jekyll/drops/document_drop.rb:36
  def previous; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def relative_path; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:91
  def tags; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:91
  def title; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def to_s; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def url; end

  private

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:72
  def fallback_data; end
end

# source://jekyll-4.2.2/lib/jekyll/drops/document_drop.rb:8
Jekyll::Drops::DocumentDrop::NESTED_OBJECT_FIELD_BLACKLIST = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:5
class Jekyll::Drops::Drop < ::Liquid::Drop
  include ::Enumerable

  # Create a new Drop
  #
  # obj - the Jekyll Site, Collection, or Document required by the
  # drop.
  #
  # Returns nothing
  #
  # @return [Drop] a new instance of Drop
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:112
  def initialize(obj); end

  # Access a method in the Drop or a field in the underlying hash data.
  # If mutable, checks the mutations first. Then checks the methods,
  # and finally check the underlying hash (e.g. document front matter)
  # if all the previous places didn't match.
  #
  # key - the string key whose value to fetch
  #
  # Returns the value for the given key, or nil if none exists
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:124
  def [](key); end

  # Set a field in the Drop. If mutable, sets in the mutations and
  # returns. If not mutable, checks first if it's trying to override a
  # Drop method and raises a DropMutationException if so. If not
  # mutable and the key is not a method on the Drop, then it sets the
  # key to the value in the underlying hash (e.g. document front
  # matter)
  #
  # key - the String key whose value to set
  # val - the Object to set the key's value to
  #
  # Returns the value the key was set to unless the Drop is not mutable
  # and the key matches a method in which case it raises a
  # DropMutationException.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:148
  def []=(key, val); end

  # Generates a list of strings which correspond to content getter
  # methods.
  #
  # Returns an Array of strings which represent method-specific keys.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:167
  def content_methods; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:244
  def each; end

  # Collects all the keys and passes each to the block in turn.
  #
  # block - a block which accepts one argument, the key
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:240
  def each_key(&block); end

  # Imitate Hash.fetch method in Drop
  #
  # Returns value if key is present in Drop, otherwise returns default value
  # KeyError is raised if key is not present and no default value given
  #
  # @raise [KeyError]
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:279
  def fetch(key, default = T.unsafe(nil), &block); end

  # Generate a Hash for use in generating JSON.
  # This is useful if fields need to be cleared before the JSON can generate.
  #
  # Returns a Hash ready for JSON generation.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:222
  def hash_for_json(*_arg0); end

  # Inspect the drop's keys and values through a JSON representation
  # of its keys and values.
  #
  # Returns a pretty generation of the hash representation of the Drop.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:214
  def inspect; end

  # Access a method in the Drop or a field in the underlying hash data.
  # If mutable, checks the mutations first. Then checks the methods,
  # and finally check the underlying hash (e.g. document front matter)
  # if all the previous places didn't match.
  #
  # key - the string key whose value to fetch
  #
  # Returns the value for the given key, or nil if none exists
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:124
  def invoke_drop(key); end

  # Check if key exists in Drop
  #
  # key - the string key whose value to fetch
  #
  # Returns true if the given key is present
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:179
  def key?(key); end

  # Generates a list of keys with user content as their values.
  # This gathers up the Drop methods and keys of the mutations and
  # underlying data hashes and performs a set union to ensure a list
  # of unique keys for the Drop.
  #
  # Returns an Array of unique keys for content for the Drop.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:192
  def keys; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:250
  def merge(other, &block); end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:260
  def merge!(other); end

  # Generate a Hash representation of the Drop by resolving each key's
  # value. It includes Drop methods, mutations, and the underlying object's
  # data. See the documentation for Drop#keys for more.
  #
  # Returns a Hash with all the keys and values resolved.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:203
  def to_h; end

  # Generate a Hash representation of the Drop by resolving each key's
  # value. It includes Drop methods, mutations, and the underlying object's
  # data. See the documentation for Drop#keys for more.
  #
  # Returns a Hash with all the keys and values resolved.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:203
  def to_hash; end

  # Generate a JSON representation of the Drop.
  #
  # state - the JSON::State object which determines the state of current processing.
  #
  # Returns a JSON representation of the Drop in a String.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:231
  def to_json(state = T.unsafe(nil)); end

  private

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:288
  def mutations; end

  class << self
    # Generate public Drop instance_methods for given string `key`.
    # The generated method access(es) `@obj`'s data hash.
    #
    # Returns method symbol.
    #
    # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:90
    def data_delegator(key); end

    # Generate public Drop instance_methods for each string entry in the given list.
    # The generated method(s) access(es) `@obj`'s data hash.
    #
    # Returns nothing.
    #
    # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:79
    def data_delegators(*strings); end

    # Generate public Drop instance_method for given symbol that calls `@obj.<sym>`.
    #
    # Returns delegated method symbol.
    #
    # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:64
    def delegate_method(symbol); end

    # Generate public Drop instance_method named `delegate` that calls `@obj.<original>`.
    #
    # Returns delegated method symbol.
    #
    # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:71
    def delegate_method_as(original, delegate); end

    # Generate public Drop instance_methods for each symbol in the given list.
    #
    # Returns nothing.
    #
    # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:56
    def delegate_methods(*symbols); end

    # Array of stringified instance methods that do not end with the assignment operator.
    #
    # (<klass>.instance_methods always generates a new Array object so it can be mutated)
    #
    # Returns array of strings.
    #
    # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:99
    def getter_method_names; end

    # Get or set whether the drop class is mutable.
    # Mutability determines whether or not pre-defined fields may be
    # overwritten.
    #
    # is_mutable - Boolean set mutability of the class (default: nil)
    #
    # Returns the mutability of the class
    #
    # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:34
    def mutable(is_mutable = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:38
    def mutable?; end

    # Generate private Drop instance_methods for each symbol in the given list.
    #
    # Returns nothing.
    #
    # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:48
    def private_delegate_methods(*symbols); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:8
Jekyll::Drops::Drop::NON_CONTENT_METHODS = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:9
Jekyll::Drops::Drop::NON_CONTENT_METHOD_NAMES = T.let(T.unsafe(nil), Array)

# A private stash to avoid repeatedly generating the setter method name string for
# a call to `Drops::Drop#[]=`.
# The keys of the stash below have a very high probability of being called upon during
# the course of various `Jekyll::Renderer#run` calls.
#
# source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:16
Jekyll::Drops::Drop::SETTER_KEYS_STASH = T.let(T.unsafe(nil), Hash)

# source://jekyll-4.2.2/lib/jekyll/drops/excerpt_drop.rb:5
class Jekyll::Drops::ExcerptDrop < ::Jekyll::Drops::DocumentDrop
  # source://jekyll-4.2.2/lib/jekyll/drops/excerpt_drop.rb:10
  def date; end

  # source://jekyll-4.2.2/lib/jekyll/drops/excerpt_drop.rb:14
  def excerpt; end

  # source://jekyll-4.2.2/lib/jekyll/drops/excerpt_drop.rb:6
  def layout; end
end

# source://jekyll-4.2.2/lib/jekyll/drops/jekyll_drop.rb:5
class Jekyll::Drops::JekyllDrop < ::Liquid::Drop
  # source://jekyll-4.2.2/lib/jekyll/drops/jekyll_drop.rb:16
  def environment; end

  # source://jekyll-4.2.2/lib/jekyll/drops/jekyll_drop.rb:20
  def to_h; end

  # source://jekyll-4.2.2/lib/jekyll/drops/jekyll_drop.rb:27
  def to_json(state = T.unsafe(nil)); end

  # source://jekyll-4.2.2/lib/jekyll/drops/jekyll_drop.rb:12
  def version; end

  class << self
    # source://jekyll-4.2.2/lib/jekyll/drops/jekyll_drop.rb:7
    def global; end
  end
end

# source://jekyll-4.2.2/lib/jekyll/drops/site_drop.rb:5
class Jekyll::Drops::SiteDrop < ::Jekyll::Drops::Drop
  extend ::Forwardable

  # source://jekyll-4.2.2/lib/jekyll/drops/site_drop.rb:15
  def [](key); end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def categories; end

  # source://jekyll-4.2.2/lib/jekyll/drops/site_drop.rb:37
  def collections; end

  # return nil for `{{ site.config }}` even if --config was passed via CLI
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/site_drop.rb:63
  def config; end

  # Sets the attribute current_document
  #
  # @param value the value to set the attribute current_document to.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/site_drop.rb:60
  def current_document=(_arg0); end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:72
  def data; end

  # `Site#documents` cannot be memoized so that `Site#docs_to_write` can access the
  # latest state of the attribute.
  #
  # Since this method will be called after `Site#pre_render` hook, the `Site#documents`
  # array shouldn't thereafter change and can therefore be safely memoized to prevent
  # additional computation of `Site#documents`.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/site_drop.rb:47
  def documents; end

  # source://jekyll-4.2.2/lib/jekyll/drops/site_drop.rb:31
  def html_pages; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/site_drop.rb:23
  def key?(key); end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def pages; end

  # source://jekyll-4.2.2/lib/jekyll/drops/site_drop.rb:27
  def posts; end

  # `{{ site.related_posts }}` is how posts can get posts related to
  # them, either through LSI if it's enabled, or through the most
  # recent posts.
  # We should remove this in 4.0 and switch to `{{ post.related_posts }}`.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/site_drop.rb:55
  def related_posts; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def static_files; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def tags; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def time; end

  private

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:72
  def fallback_data; end
end

# source://jekyll-4.2.2/lib/jekyll/drops/static_file_drop.rb:5
class Jekyll::Drops::StaticFileDrop < ::Jekyll::Drops::Drop
  extend ::Forwardable

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def basename; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:72
  def collection; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def extname; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def modified_time; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def name; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:72
  def path; end

  private

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:72
  def fallback_data; end
end

# source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:5
class Jekyll::Drops::UnifiedPayloadDrop < ::Jekyll::Drops::Drop
  # Returns the value of attribute content.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:8
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:8
  def content=(_arg0); end

  # Returns the value of attribute highlighter_prefix.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:9
  def highlighter_prefix; end

  # Sets the attribute highlighter_prefix
  #
  # @param value the value to set the attribute highlighter_prefix to.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:9
  def highlighter_prefix=(_arg0); end

  # Returns the value of attribute highlighter_suffix.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:9
  def highlighter_suffix; end

  # Sets the attribute highlighter_suffix
  #
  # @param value the value to set the attribute highlighter_suffix to.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:9
  def highlighter_suffix=(_arg0); end

  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:11
  def jekyll; end

  # Returns the value of attribute layout.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:8
  def layout; end

  # Sets the attribute layout
  #
  # @param value the value to set the attribute layout to.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:8
  def layout=(_arg0); end

  # Returns the value of attribute page.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:8
  def page; end

  # Sets the attribute page
  #
  # @param value the value to set the attribute page to.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:8
  def page=(_arg0); end

  # Returns the value of attribute paginator.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:8
  def paginator; end

  # Sets the attribute paginator
  #
  # @param value the value to set the attribute paginator to.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:8
  def paginator=(_arg0); end

  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:15
  def site; end

  private

  # source://jekyll-4.2.2/lib/jekyll/drops/unified_payload_drop.rb:21
  def fallback_data; end
end

# source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:5
class Jekyll::Drops::UrlDrop < ::Jekyll::Drops::Drop
  extend ::Forwardable

  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:30
  def categories; end

  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:13
  def collection; end

  # DD: 01..31
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:57
  def day; end

  # hh: 00..23
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:62
  def hour; end

  # D: 1..31
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:77
  def i_day; end

  # M: 1..12
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:82
  def i_month; end

  # ddd: Monday..Sunday
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:124
  def long_day; end

  # MMMM: January..December
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:92
  def long_month; end

  # mm: 00..59
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:67
  def minute; end

  # MM: 01..12
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:52
  def month; end

  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:17
  def name; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:65
  def output_ext; end

  # source://jekyll-4.2.2/lib/jekyll/drops/drop.rb:72
  def path; end

  # ss: 00..59
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:72
  def second; end

  # dd: Mon..Sun
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:119
  def short_day; end

  # MMM: Jan..Dec
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:87
  def short_month; end

  # YY: 00..99
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:97
  def short_year; end

  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:26
  def slug; end

  # Similar to output from #categories, but each category will be downcased and
  # all non-alphanumeric characters of the category replaced with a hyphen.
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:40
  def slugified_categories; end

  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:21
  def title; end

  # d: 1..7 (Monday..Sunday)
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:114
  def w_day; end

  # CCYYw, ISO week year
  # may differ from CCYY for the first days of January and last days of December
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:103
  def w_year; end

  # WW: 01..53
  # %W and %U do not comply with ISO 8601-1
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:109
  def week; end

  # DDD: 001..366
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:129
  def y_day; end

  # CCYY
  #
  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:47
  def year; end

  private

  # source://jekyll-4.2.2/lib/jekyll/drops/url_drop.rb:135
  def fallback_data; end
end

# source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:4
class Jekyll::EntryFilter
  # @return [EntryFilter] a new instance of EntryFilter
  #
  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:9
  def initialize(site, base_directory = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:64
  def backup?(entry); end

  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:16
  def base_directory; end

  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:20
  def derive_base_directory(site, base_dir); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:68
  def excluded?(entry); end

  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:31
  def filter(entries); end

  # Check if an entry matches a specific pattern.
  # Returns true if path matches against any glob pattern, else false.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:101
  def glob_include?(enumerator, entry); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:54
  def included?(entry); end

  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:25
  def relative_to_source(entry); end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:5
  def site; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:59
  def special?(entry); end

  # --
  # Check if a file is a symlink.
  # NOTE: This can be converted to allowing even in safe,
  #   since we use Pathutil#in_path? now.
  # --
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:84
  def symlink?(entry); end

  # --
  # NOTE: Pathutil#in_path? gets the realpath.
  # Check if a path is outside of our given root.
  # --
  #
  # @param entry [<Anything>] the entry you want to validate.
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:93
  def symlink_outside_site_source?(entry); end
end

# source://jekyll-4.2.2/lib/jekyll/entry_filter.rb:7
Jekyll::EntryFilter::SPECIAL_LEADING_CHAR_REGEX = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/errors.rb:4
module Jekyll::Errors; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:9
class Jekyll::Errors::DropMutationException < ::Jekyll::Errors::FatalException; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:5
class Jekyll::Errors::FatalException < ::RuntimeError; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:18
class Jekyll::Errors::InvalidConfigurationError < ::Jekyll::Errors::FatalException; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:14
class Jekyll::Errors::InvalidDateError < ::Jekyll::Errors::FatalException; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:10
class Jekyll::Errors::InvalidPermalinkError < ::Jekyll::Errors::FatalException; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:15
class Jekyll::Errors::InvalidPostNameError < ::Jekyll::Errors::FatalException; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:7
class Jekyll::Errors::InvalidThemeName < ::Jekyll::Errors::FatalException; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:17
class Jekyll::Errors::InvalidURLError < ::Jekyll::Errors::FatalException; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:11
class Jekyll::Errors::InvalidYAMLFrontMatterError < ::Jekyll::Errors::FatalException; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:12
class Jekyll::Errors::MissingDependencyException < ::Jekyll::Errors::FatalException; end

# source://jekyll-4.2.2/lib/jekyll/errors.rb:16
class Jekyll::Errors::PostURLError < ::Jekyll::Errors::FatalException; end

# source://jekyll-4.2.2/lib/jekyll/excerpt.rb:4
class Jekyll::Excerpt
  extend ::Forwardable

  # Initialize this Excerpt instance.
  #
  # doc - The Document.
  #
  # Returns the new Excerpt.
  #
  # @return [Excerpt] a new instance of Excerpt
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:24
  def initialize(doc); end

  # source://RUBY_ROOT/forwardable.rb:229
  def collection(*args, **_arg1, &block); end

  # Returns the value of attribute content.
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:8
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:8
  def content=(_arg0); end

  # Fetch YAML front-matter data from related doc, without layout key
  #
  # Returns Hash of doc data
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:32
  def data; end

  # Returns the value of attribute doc.
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:7
  def doc; end

  # Sets the attribute doc
  #
  # @param value the value to set the attribute doc to.
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:7
  def doc=(_arg0); end

  # Returns the value of attribute ext.
  #
  # source://RUBY_ROOT/forwardable.rb:229
  def ext(*args, **_arg1, &block); end

  # Sets the attribute ext
  #
  # @param value the value to set the attribute ext to.
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:8
  def ext=(_arg0); end

  # source://RUBY_ROOT/forwardable.rb:229
  def extname(*args, **_arg1, &block); end

  # The UID for this doc (useful in feeds).
  # e.g. /2008/11/05/my-awesome-doc
  #
  # Returns the String UID.
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:66
  def id; end

  # Check if excerpt includes a string
  #
  # Returns true if the string passed in
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:58
  def include?(something); end

  # Returns the shorthand String identifier of this doc.
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:79
  def inspect; end

  # source://RUBY_ROOT/forwardable.rb:229
  def name(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def next_doc(*args, **_arg1, &block); end

  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:83
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:9
  def output=(_arg0); end

  # 'Path' of the excerpt.
  #
  # Returns the path for the doc this excerpt belongs to with #excerpt appended
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:44
  def path; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:87
  def place_in_layout?; end

  # source://RUBY_ROOT/forwardable.rb:229
  def previous_doc(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def related_posts(*args, **_arg1, &block); end

  # 'Relative Path' of the excerpt.
  #
  # Returns the relative_path for the doc this excerpt belongs to with #excerpt appended
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:51
  def relative_path; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:91
  def render_with_liquid?; end

  # source://RUBY_ROOT/forwardable.rb:229
  def site(*args, **_arg1, &block); end

  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:74
  def to_liquid; end

  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:70
  def to_s; end

  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:39
  def trigger_hooks(*_arg0); end

  # source://RUBY_ROOT/forwardable.rb:229
  def type(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def url(*args, **_arg1, &block); end

  protected

  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:137
  def extract_excerpt(doc_content); end

  private

  # source://RUBY_ROOT/forwardable.rb:229
  def coffeescript_file?(*args, **_arg1, &block); end

  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:176
  def endtag_regex_stash(tag_name); end

  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:168
  def extract_markdown_link_reference_defintions(head, tail); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:181
  def liquid_block?(tag_name); end

  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:192
  def print_build_warning; end

  # append appropriate closing tag(s) (for each Liquid block), to the `head` if the
  # partitioning resulted in leaving the closing tag somewhere in the `tail` partition.
  #
  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:152
  def sanctify_liquid_tags(head); end

  # source://RUBY_ROOT/forwardable.rb:229
  def yaml_file?(*args, **_arg1, &block); end
end

# Internal: Extract excerpt from the content
#
# By default excerpt is your first paragraph of a doc: everything before
# the first two new lines:
#
#     ---
#     title: Example
#     ---
#
#     First paragraph with [link][1].
#
#     Second paragraph.
#
#     [1]: http://example.com/
#
# This is fairly good option for Markdown and Textile files. But might cause
# problems for HTML _docs (which is quite unusual for Jekyll). If default
# excerpt delimiter is not good for you, you might want to set your own via
# configuration option `excerpt_separator`. For example, following is a good
# alternative for HTML _docs:
#
#     # file: _config.yml
#     excerpt_separator: "<!-- more -->"
#
# Notice that all markdown-style link references will be appended to the
# excerpt. So the example doc above will have this excerpt source:
#
#     First paragraph with [link][1].
#
#     [1]: http://example.com/
#
# Excerpts are rendered same time as content is rendered.
#
# Returns excerpt String
#
# source://jekyll-4.2.2/lib/jekyll/excerpt.rb:134
Jekyll::Excerpt::LIQUID_TAG_REGEX = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/excerpt.rb:135
Jekyll::Excerpt::MKDWN_LINK_REF_REGEX = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/external.rb:4
module Jekyll::External
  class << self
    # Gems that, if installed, should be loaded.
    # Usually contain subcommands.
    #
    # source://jekyll-4.2.2/lib/jekyll/external.rb:10
    def blessed_gems; end

    # Require a gem or file if it's present, otherwise silently fail.
    #
    # names - a string gem name or array of gem names
    #
    # source://jekyll-4.2.2/lib/jekyll/external.rb:23
    def require_if_present(names); end

    # Require a gem or gems. If it's not present, show a very nice error
    # message that explains everything and is much more helpful than the
    # normal LoadError.
    #
    # names - a string gem name or array of gem names
    #
    # source://jekyll-4.2.2/lib/jekyll/external.rb:56
    def require_with_graceful_fail(names); end

    # The version constraint required to activate a given gem.
    # Usually the gem version requirement is "> 0," because any version
    # will do. In the case of jekyll-_docs, however, we require the exact
    # same version as Jekyll.
    #
    # Returns a String version constraint in a parseable form for
    # RubyGems.
    #
    # source://jekyll-4.2.2/lib/jekyll/external.rb:43
    def version_constraint(gem_name); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/filters/date_filters.rb:4
module Jekyll::Filters
  include ::Jekyll::Filters::URLFilters
  include ::Jekyll::Filters::GroupingFilters
  include ::Jekyll::Filters::DateFilters

  # Join an array of things into a string by separating with commas and the
  # word "and" for the last one.
  #
  # array - The Array of Strings to join.
  # connector - Word used to connect the last 2 items in the array
  #
  # Examples
  #
  #   array_to_sentence_string(["apples", "oranges", "grapes"])
  #   # => "apples, oranges, and grapes"
  #
  # Returns the formatted String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:152
  def array_to_sentence_string(array, connector = T.unsafe(nil)); end

  # CGI escape a string for use in a URL. Replaces any special characters
  # with appropriate %XX replacements.
  #
  # input - The String to escape.
  #
  # Examples
  #
  #   cgi_escape('foo,bar;baz?')
  #   # => "foo%2Cbar%3Bbaz%3F"
  #
  # Returns the escaped String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:92
  def cgi_escape(input); end

  # Search an array of objects and returns the first object that has the queried attribute
  # with the given value or returns nil otherwise.
  #
  # input    - the object array.
  # property - the property within each object to search by.
  # value    - the desired value.
  #            Cannot be an instance of Array nor Hash since calling #to_s on them returns
  #            their `#inspect` string object.
  #
  # Returns the found object or nil
  #
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:237
  def find(input, property, value); end

  # Searches an array of objects against an expression and returns the first object for which
  # the expression evaluates to true, or returns nil otherwise.
  #
  # input - the object array
  # variable - the variable to assign each item to in the expression
  # expression - a Liquid comparison expression passed in as a string
  #
  # Returns the found object or nil
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:271
  def find_exp(input, variable, expression); end

  # Convert an object into its String representation for debugging
  #
  # input - The Object to be converted
  #
  # Returns a String representation of the object.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:374
  def inspect(input); end

  # Convert the input into json string
  #
  # input - The Array or Hash to be converted
  #
  # Returns the converted json string
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:170
  def jsonify(input); end

  # Convert a Markdown string into HTML output.
  #
  # input - The Markdown String to convert.
  #
  # Returns the HTML formatted String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:16
  def markdownify(input); end

  # Replace any whitespace in the input string with a single space
  #
  # input - The String on which to operate.
  #
  # Returns the formatted String
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:115
  def normalize_whitespace(input); end

  # Count the number of words in the input string.
  #
  # input - The String on which to operate.
  #
  # Returns the Integer word count.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:124
  def number_of_words(input, mode = T.unsafe(nil)); end

  # source://jekyll-4.2.2/lib/jekyll/filters.rb:324
  def pop(array, num = T.unsafe(nil)); end

  # source://jekyll-4.2.2/lib/jekyll/filters.rb:333
  def push(array, input); end

  # source://jekyll-4.2.2/lib/jekyll/filters.rb:358
  def sample(input, num = T.unsafe(nil)); end

  # Convert a Sass string into CSS output.
  #
  # input - The Sass String to convert.
  #
  # Returns the CSS formatted String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:38
  def sassify(input); end

  # Convert a Scss string into CSS output.
  #
  # input - The Scss String to convert.
  #
  # Returns the CSS formatted String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:49
  def scssify(input); end

  # source://jekyll-4.2.2/lib/jekyll/filters.rb:341
  def shift(array, num = T.unsafe(nil)); end

  # Slugify a filename or title.
  #
  # input - The filename or title to slugify.
  # mode - how string is slugified
  #
  # Returns the given filename or title as a lowercase URL String.
  # See Utils.slugify for more detail.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:62
  def slugify(input, mode = T.unsafe(nil)); end

  # Convert quotes into smart quotes.
  #
  # input - The String to convert.
  #
  # Returns the smart-quotified String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:27
  def smartify(input); end

  # Sort an array of objects
  #
  # input - the object array
  # property - property within each object to filter by
  # nils ('first' | 'last') - nils appear before or after non-nil values
  #
  # Returns the filtered array of objects
  #
  # @raise [ArgumentError]
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:304
  def sort(input, property = T.unsafe(nil), nils = T.unsafe(nil)); end

  # Convert the input into integer
  #
  # input - the object string
  #
  # Returns the integer value
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:290
  def to_integer(input); end

  # source://jekyll-4.2.2/lib/jekyll/filters.rb:350
  def unshift(array, input); end

  # URI escape a string.
  #
  # input - The String to escape.
  #
  # Examples
  #
  #   uri_escape('foo, bar \\baz?')
  #   # => "foo,%20bar%20%5Cbaz?"
  #
  # Returns the escaped String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:106
  def uri_escape(input); end

  # Filter an array of objects
  #
  # input    - the object array.
  # property - the property within each object to filter by.
  # value    - the desired value.
  #            Cannot be an instance of Array nor Hash since calling #to_s on them returns
  #            their `#inspect` string object.
  #
  # Returns the filtered array of objects
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:183
  def where(input, property, value); end

  # Filters an array of objects against an expression
  #
  # input - the object array
  # variable - the variable to assign each item to in the expression
  # expression - a Liquid comparison expression passed in as a string
  #
  # Returns the filtered array of objects
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:211
  def where_exp(input, variable, expression); end

  # XML escape a string for use. Replaces any special characters with
  # appropriate HTML entity replacements.
  #
  # input - The String to escape.
  #
  # Examples
  #
  #   xml_escape('foo "bar" <baz>')
  #   # => "foo &quot;bar&quot; &lt;baz&gt;"
  #
  # Returns the escaped String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:77
  def xml_escape(input); end

  private

  # source://jekyll-4.2.2/lib/jekyll/filters.rb:462
  def as_liquid(item); end

  # `where` filter helper
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:403
  def compare_property_vs_target(property, target); end

  # source://jekyll-4.2.2/lib/jekyll/filters.rb:424
  def item_property(item, property); end

  # Generate a Liquid::Condition object from a Liquid::Parser object additionally processing
  # the parsed expression based on whether the expression consists of binary operations with
  # Liquid operators `and` or `or`
  #
  #  - parser: an instance of Liquid::Parser
  #
  # Returns an instance of Liquid::Condition
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:502
  def parse_binary_comparison(parser); end

  # Generates a Liquid::Condition object from a Liquid::Parser object based on whether the parsed
  # expression involves a "comparison" operator (e.g. <, ==, >, !=, etc)
  #
  #  - parser: an instance of Liquid::Parser
  #
  # Returns an instance of Liquid::Condition
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:519
  def parse_comparison(parser); end

  # Parse a string to a Liquid Condition
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:487
  def parse_condition(exp); end

  # return numeric values as numbers for proper sorting
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:454
  def parse_sort_input(property); end

  # source://jekyll-4.2.2/lib/jekyll/filters.rb:441
  def read_liquid_attribute(liquid_data, property); end

  # Sort the input Enumerable by the given property.
  # If the property doesn't exist, return the sort order respective of
  # which item doesn't have the property.
  # We also utilize the Schwartzian transform to make this more efficient.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters.rb:384
  def sort_input(input, property, order); end
end

# source://jekyll-4.2.2/lib/jekyll/filters/date_filters.rb:5
module Jekyll::Filters::DateFilters
  # Format a date in long format e.g. "27 January 2011".
  # Ordinal format is also supported, in both the UK
  # (e.g. "27th January 2011") and US ("e.g. January 27th, 2011") formats.
  # UK format is the default.
  #
  # date - the Time to format.
  # type - if "ordinal" the returned String will be in ordinal format
  # style - if "US" the returned String will be in US format.
  #         Otherwise it will be in UK format.
  #
  # Returns the formatted String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/date_filters.rb:32
  def date_to_long_string(date, type = T.unsafe(nil), style = T.unsafe(nil)); end

  # Format a date according to RFC-822
  #
  # date - The Time to format.
  #
  # Examples
  #
  #   date_to_rfc822(Time.now)
  #   # => "Sun, 24 Apr 2011 12:34:46 +0000"
  #
  # Returns the formatted String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/date_filters.rb:62
  def date_to_rfc822(date); end

  # Format a date in short format e.g. "27 Jan 2011".
  # Ordinal format is also supported, in both the UK
  # (e.g. "27th Jan 2011") and US ("e.g. Jan 27th, 2011") formats.
  # UK format is the default.
  #
  # date - the Time to format.
  # type - if "ordinal" the returned String will be in ordinal format
  # style - if "US" the returned String will be in US format.
  #         Otherwise it will be in UK format.
  #
  # Returns the formatting String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/date_filters.rb:17
  def date_to_string(date, type = T.unsafe(nil), style = T.unsafe(nil)); end

  # Format a date for use in XML.
  #
  # date - The Time to format.
  #
  # Examples
  #
  #   date_to_xmlschema(Time.now)
  #   # => "2011-04-24T20:34:46+08:00"
  #
  # Returns the formatted String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/date_filters.rb:46
  def date_to_xmlschema(date); end

  private

  # source://jekyll-4.2.2/lib/jekyll/filters/date_filters.rb:89
  def ordinal(number); end

  # month_type: Notations that evaluate to 'Month' via `Time#strftime` ("%b", "%B")
  # type: nil (default) or "ordinal"
  # style: nil (default) or "US"
  #
  # Returns a stringified date or the empty input.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/date_filters.rb:75
  def stringify_date(date, month_type, type = T.unsafe(nil), style = T.unsafe(nil)); end

  # source://jekyll-4.2.2/lib/jekyll/filters/date_filters.rb:100
  def time(input); end
end

# source://jekyll-4.2.2/lib/jekyll/filters.rb:449
Jekyll::Filters::FLOAT_LIKE = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/filters/grouping_filters.rb:5
module Jekyll::Filters::GroupingFilters
  # Group an array of items by a property
  #
  # input - the inputted Enumerable
  # property - the property
  #
  # Returns an array of Hashes, each looking something like this:
  #  {"name"  => "larry"
  #   "items" => [...] } # all the items where `property` == "larry"
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/grouping_filters.rb:14
  def group_by(input, property); end

  # Group an array of items by an expression
  #
  # input - the object array
  # variable - the variable to assign each item to in the expression
  # expression -a Liquid comparison expression passed in as a string
  #
  # Returns the filtered array of objects
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/grouping_filters.rb:30
  def group_by_exp(input, variable, expression); end

  private

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/grouping_filters.rb:49
  def groupable?(element); end

  # source://jekyll-4.2.2/lib/jekyll/filters/grouping_filters.rb:53
  def grouped_array(groups); end

  # source://jekyll-4.2.2/lib/jekyll/filters/grouping_filters.rb:45
  def parse_expression(str); end
end

# source://jekyll-4.2.2/lib/jekyll/filters.rb:450
Jekyll::Filters::INTEGER_LIKE = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/filters/url_filters.rb:5
module Jekyll::Filters::URLFilters
  # Produces an absolute URL based on site.url and site.baseurl.
  #
  # input - the URL to make absolute.
  #
  # Returns the absolute URL as a String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/url_filters.rb:11
  def absolute_url(input); end

  # Produces a URL relative to the domain root based on site.baseurl
  # unless it is already an absolute url with an authority (host).
  #
  # input - the URL to make relative to the domain root
  #
  # Returns a URL relative to the domain root as a String.
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/url_filters.rb:32
  def relative_url(input); end

  # Strips trailing `/index.html` from URLs to create pretty permalinks
  #
  # input - the URL with a possible `/index.html`
  #
  # Returns a URL with the trailing `/index.html` removed
  #
  # source://jekyll-4.2.2/lib/jekyll/filters/url_filters.rb:52
  def strip_index(input); end

  private

  # source://jekyll-4.2.2/lib/jekyll/filters/url_filters.rb:60
  def compute_absolute_url(input); end

  # source://jekyll-4.2.2/lib/jekyll/filters/url_filters.rb:73
  def compute_relative_url(input); end

  # source://jekyll-4.2.2/lib/jekyll/filters/url_filters.rb:91
  def ensure_leading_slash(input); end

  # source://jekyll-4.2.2/lib/jekyll/filters/url_filters.rb:83
  def sanitized_baseurl; end
end

# This class handles custom defaults for YAML frontmatter settings.
# These are set in _config.yml and apply both to internal use (e.g. layout)
# and the data available to liquid.
#
# It is exposed via the frontmatter_defaults method on the site class.
#
# source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:9
class Jekyll::FrontmatterDefaults
  # Initializes a new instance.
  #
  # @return [FrontmatterDefaults] a new instance of FrontmatterDefaults
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:11
  def initialize(site); end

  # Collects a hash with all default values for a page or post
  #
  # path - the relative path of the page or post
  # type - a symbol indicating the type (:post, :page or :draft)
  #
  # Returns a hash with all default values (an empty hash if there are none)
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:78
  def all(path, type); end

  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:40
  def ensure_time!(set); end

  # Finds a default value for a given setting, filtered by path and type
  #
  # path - the path (relative to the source) of the page,
  # post or :draft the default is used in
  # type - a symbol indicating whether a :page,
  # a :post or a :draft calls this method
  #
  # Returns the default value or nil if none was found
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:59
  def find(path, type, setting); end

  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:15
  def reset; end

  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:19
  def update_deprecated_types(set); end

  private

  # Checks if a given default setting scope matches the given path and type
  #
  # scope - the hash indicating the scope, as defined in _config.yml
  # path - the path to check for
  # type - the type (:post, :page or :draft) to check for
  #
  # Returns true if the scope applies to the given type and path
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:101
  def applies?(scope, path, type); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:105
  def applies_path?(scope, path); end

  # Determines whether the scope applies to type.
  # The scope applies to the type if:
  #   1. no 'type' is specified
  #   2. the 'type' in the scope is the same as the type asked about
  #
  # scope - the Hash defaults set being asked about application
  # type  - the type of the document being processed / asked about
  #         its defaults.
  #
  # Returns true if either of the above conditions are satisfied,
  #   otherwise returns false
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:159
  def applies_type?(scope, type); end

  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:131
  def glob_cache(path); end

  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:118
  def glob_scope(sanitized_path, rel_scope_path); end

  # Determines if a new scope has precedence over an old one
  #
  # old_scope - the old scope hash, or nil if there's none
  # new_scope - the new scope hash
  #
  # Returns true if the new scope has precedence over the older
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:179
  def has_precedence?(old_scope, new_scope); end

  # Collects a list of sets that match the given path and type
  #
  # Returns an array of hashes
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:198
  def matching_sets(path, type); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:136
  def path_is_subpath?(path, parent_path); end

  # Sanitizes the given path by removing a leading slash
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:230
  def sanitize_path(path); end

  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:140
  def strip_collections_dir(path); end

  # Checks if a given set of default values is valid
  #
  # set - the default value hash, as defined in _config.yml
  #
  # Returns true if the set is valid and can be used in this class
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:168
  def valid?(set); end

  # Returns a list of valid sets
  #
  # This is not cached to allow plugins to modify the configuration
  # and have their changes take effect
  #
  # Returns an array of hashes
  #
  # source://jekyll-4.2.2/lib/jekyll/frontmatter_defaults.rb:214
  def valid_sets; end
end

# source://jekyll-4.2.2/lib/jekyll/generator.rb:4
class Jekyll::Generator < ::Jekyll::Plugin
  class << self
    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:24
    def inherited(const_); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/hooks.rb:4
module Jekyll::Hooks
  class << self
    # source://jekyll-4.2.2/lib/jekyll/hooks.rb:90
    def insert_hook(owner, event, priority, &block); end

    # Ensure the priority is a Fixnum
    #
    # source://jekyll-4.2.2/lib/jekyll/hooks.rb:64
    def priority_value(priority); end

    # register hook(s) to be called later, public API
    #
    # source://jekyll-4.2.2/lib/jekyll/hooks.rb:57
    def register(owners, event, priority: T.unsafe(nil), &block); end

    # register a single hook to be called later, internal API
    #
    # @raise [Uncallable]
    #
    # source://jekyll-4.2.2/lib/jekyll/hooks.rb:71
    def register_one(owner, event, priority, &block); end

    # interface for Jekyll core components to trigger hooks
    #
    # source://jekyll-4.2.2/lib/jekyll/hooks.rb:96
    def trigger(owner, event, *args); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/hooks.rb:5
Jekyll::Hooks::DEFAULT_PRIORITY = T.let(T.unsafe(nil), Integer)

# source://jekyll-4.2.2/lib/jekyll/hooks.rb:53
class Jekyll::Hooks::NotAvailable < ::RuntimeError; end

# compatibility layer for octopress-hooks users
#
# source://jekyll-4.2.2/lib/jekyll/hooks.rb:8
Jekyll::Hooks::PRIORITY_MAP = T.let(T.unsafe(nil), Hash)

# source://jekyll-4.2.2/lib/jekyll/hooks.rb:54
class Jekyll::Hooks::Uncallable < ::RuntimeError; end

# source://jekyll-4.2.2/lib/jekyll/inclusion.rb:4
class Jekyll::Inclusion
  # @return [Inclusion] a new instance of Inclusion
  #
  # source://jekyll-4.2.2/lib/jekyll/inclusion.rb:8
  def initialize(site, base, name); end

  # source://jekyll-4.2.2/lib/jekyll/inclusion.rb:23
  def content; end

  # source://jekyll-4.2.2/lib/jekyll/inclusion.rb:27
  def inspect; end

  # Returns the value of attribute name.
  #
  # source://jekyll-4.2.2/lib/jekyll/inclusion.rb:5
  def name; end

  # Returns the value of attribute path.
  #
  # source://jekyll-4.2.2/lib/jekyll/inclusion.rb:5
  def path; end

  # source://jekyll-4.2.2/lib/jekyll/inclusion.rb:14
  def render(context); end

  # source://jekyll-4.2.2/lib/jekyll/inclusion.rb:27
  def to_s; end

  private

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/inclusion.rb:5
  def site; end
end

# source://jekyll-4.2.2/lib/jekyll/layout.rb:4
class Jekyll::Layout
  include ::Jekyll::Convertible

  # Initialize a new Layout.
  #
  # site - The Site.
  # base - The String path to the source.
  # name - The String filename of the post file.
  #
  # @return [Layout] a new instance of Layout
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:33
  def initialize(site, base, name); end

  # Gets/Sets the content of this layout.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:26
  def content; end

  # Gets/Sets the content of this layout.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:26
  def content=(_arg0); end

  # Gets/Sets the Hash that holds the metadata for this layout.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:23
  def data; end

  # Gets/Sets the Hash that holds the metadata for this layout.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:23
  def data=(_arg0); end

  # Gets/Sets the extension of this layout.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:20
  def ext; end

  # Gets/Sets the extension of this layout.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:20
  def ext=(_arg0); end

  # Returns the object as a debug String.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:63
  def inspect; end

  # Gets the name of this layout.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:11
  def name; end

  # Gets the path to this layout.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:14
  def path; end

  # Extract information from the layout filename.
  #
  # name - The String filename of the layout file.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:58
  def process(name); end

  # Gets the path to this layout relative to its base
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:17
  def relative_path; end

  # Gets the Site object.
  #
  # source://jekyll-4.2.2/lib/jekyll/layout.rb:8
  def site; end
end

# source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:4
class Jekyll::LayoutReader
  # @return [LayoutReader] a new instance of LayoutReader
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:7
  def initialize(site); end

  # source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:26
  def layout_directory; end

  # source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:12
  def read; end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:5
  def site; end

  # source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:30
  def theme_layout_directory; end

  private

  # source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:44
  def entries_in(dir); end

  # source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:36
  def layout_entries; end

  # source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:52
  def layout_name(file); end

  # source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:40
  def theme_layout_entries; end

  # source://jekyll-4.2.2/lib/jekyll/readers/layout_reader.rb:56
  def within(directory); end
end

# source://jekyll-4.2.2/lib/jekyll/liquid_extensions.rb:4
module Jekyll::LiquidExtensions
  # Lookup a Liquid variable in the given context.
  #
  # context  - the Liquid context in question.
  # variable - the variable name, as a string.
  #
  # Returns the value of the variable in the context
  #   or the variable name if not found.
  #
  # source://jekyll-4.2.2/lib/jekyll/liquid_extensions.rb:12
  def lookup_variable(context, variable); end
end

# source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:4
class Jekyll::LiquidRenderer
  # @return [LiquidRenderer] a new instance of LiquidRenderer
  #
  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:8
  def initialize(site); end

  # A persistent cache to store and retrieve parsed templates based on the filename
  # via `LiquidRenderer::File#parse`
  #
  # It is emptied when `self.reset` is called.
  #
  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:50
  def cache; end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:19
  def file(filename); end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:26
  def increment_bytes(filename, bytes); end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:34
  def increment_count(filename); end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:30
  def increment_time(filename, time); end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:14
  def reset; end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:38
  def stats_table(num_of_rows = T.unsafe(nil)); end

  private

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:76
  def new_profile_hash; end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:56
  def normalize_path(filename); end

  class << self
    # source://jekyll-4.2.2/lib/jekyll/liquid_renderer.rb:42
    def format_error(error, path); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:5
class Jekyll::LiquidRenderer::File
  # @return [File] a new instance of File
  #
  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:6
  def initialize(renderer, filename); end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:11
  def parse(content); end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:20
  def render(*args); end

  # This method simply 'rethrows any error' before attempting to render the template.
  #
  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:33
  def render!(*args); end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:45
  def warnings; end

  private

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:62
  def measure_bytes; end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:57
  def measure_counts; end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:68
  def measure_time; end

  # clear assigns to `Liquid::Template` instance prior to rendering since
  # `Liquid::Template` instances are cached in Jekyll 4.
  #
  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/file.rb:53
  def reset_template_assigns; end
end

# source://jekyll-4.2.2/lib/jekyll/liquid_renderer/table.rb:5
class Jekyll::LiquidRenderer::Table
  # @return [Table] a new instance of Table
  #
  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/table.rb:8
  def initialize(stats); end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/table.rb:12
  def to_s(num_of_rows = T.unsafe(nil)); end

  private

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/table.rb:19
  def data_for_table(num_of_rows); end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/table.rb:49
  def format_bytes(bytes); end

  # source://jekyll-4.2.2/lib/jekyll/liquid_renderer/table.rb:45
  def header_labels; end
end

# source://jekyll-4.2.2/lib/jekyll/liquid_renderer/table.rb:6
Jekyll::LiquidRenderer::Table::GAUGES = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:4
class Jekyll::LogAdapter
  # Public: Create a new instance of a log writer
  #
  # writer - Logger compatible instance
  # log_level - (optional, symbol) the log level
  #
  # Returns nothing
  #
  # @return [LogAdapter] a new instance of LogAdapter
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:20
  def initialize(writer, level = T.unsafe(nil)); end

  # Public: Print an error message and immediately abort the process
  #
  # topic - the topic of the message, e.g. "Configuration file", "Deprecation", etc.
  # message - the message detail (can be omitted)
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:95
  def abort_with(topic, message = T.unsafe(nil), &block); end

  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:38
  def adjust_verbosity(options = T.unsafe(nil)); end

  # Public: Print a debug message
  #
  # topic - the topic of the message, e.g. "Configuration file", "Deprecation", etc.
  # message - the message detail
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:55
  def debug(topic, message = T.unsafe(nil), &block); end

  # Public: Print an error message
  #
  # topic - the topic of the message, e.g. "Configuration file", "Deprecation", etc.
  # message - the message detail
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:85
  def error(topic, message = T.unsafe(nil), &block); end

  # Internal: Format the topic
  #
  # topic - the topic of the message, e.g. "Configuration file", "Deprecation", etc.
  # colon -
  #
  # Returns the formatted topic statement
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:123
  def formatted_topic(topic, colon = T.unsafe(nil)); end

  # Public: Print a message
  #
  # topic - the topic of the message, e.g. "Configuration file", "Deprecation", etc.
  # message - the message detail
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:65
  def info(topic, message = T.unsafe(nil), &block); end

  # Returns the value of attribute level.
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:5
  def level; end

  # Public: Set the log level on the writer
  #
  # level - (symbol) the log level
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:31
  def log_level=(level); end

  # Internal: Build a topic method
  #
  # topic - the topic of the message, e.g. "Configuration file", "Deprecation", etc.
  # message - the message detail
  #
  # Returns the formatted message
  #
  # @raise [ArgumentError]
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:106
  def message(topic, message = T.unsafe(nil)); end

  # Returns the value of attribute messages.
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:5
  def messages; end

  # Public: Print a message
  #
  # topic - the topic of the message, e.g. "Configuration file", "Deprecation", etc.
  # message - the message detail
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:75
  def warn(topic, message = T.unsafe(nil), &block); end

  # Internal: Log a message.
  #
  # level_of_message - the Symbol level of message, one of :debug, :info, :warn, :error
  # topic - the String topic or full message
  # message - the String message (optional)
  # block - a block containing the message (optional)
  #
  # Returns false if the message was not written, otherwise returns the value of calling
  # the appropriate writer method, e.g. writer.info.
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:145
  def write(level_of_message, topic, message = T.unsafe(nil), &block); end

  # Internal: Check if the message should be written given the log level.
  #
  # level_of_message - the Symbol level of message, one of :debug, :info, :warn, :error
  #
  # Returns whether the message should be written.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:132
  def write_message?(level_of_message); end

  # Returns the value of attribute writer.
  #
  # source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:5
  def writer; end
end

# source://jekyll-4.2.2/lib/jekyll/log_adapter.rb:7
Jekyll::LogAdapter::LOG_LEVELS = T.let(T.unsafe(nil), Hash)

# source://jekyll-4.2.2/lib/jekyll/page.rb:4
class Jekyll::Page
  include ::Jekyll::Convertible

  # Initialize a new Page.
  #
  # site - The Site object.
  # base - The String path to the source.
  # dir  - The String path between the source and the file.
  # name - The String filename of the file.
  #
  # @return [Page] a new instance of Page
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:39
  def initialize(site, base, dir, name); end

  # Returns the value of attribute basename.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:9
  def basename; end

  # Sets the attribute basename
  #
  # @param value the value to set the attribute basename to.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:9
  def basename=(_arg0); end

  # Returns the value of attribute content.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:10
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:10
  def content=(_arg0); end

  # Returns the value of attribute data.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:10
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:10
  def data=(_arg0); end

  # Obtain destination path.
  #
  # dest - The String path to the destination dir.
  #
  # Returns the destination file path String.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:155
  def destination(dest); end

  # The generated directory into which the page will be placed
  # upon generation. This is derived from the permalink or, if
  # permalink is absent, will be '/'
  #
  # Returns the String destination directory.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:66
  def dir; end

  # Sets the attribute dir
  #
  # @param value the value to set the attribute dir to.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:7
  def dir=(_arg0); end

  # source://jekyll-4.2.2/lib/jekyll/page.rb:192
  def excerpt; end

  # source://jekyll-4.2.2/lib/jekyll/page.rb:188
  def excerpt_separator; end

  # Returns the value of attribute ext.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:9
  def ext; end

  # Sets the attribute ext
  #
  # @param value the value to set the attribute ext to.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:9
  def ext=(_arg0); end

  # Returns the value of attribute ext.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:9
  def extname; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:198
  def generate_excerpt?; end

  # Returns the Boolean of whether this Page is HTML or not.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:171
  def html?; end

  # Returns the Boolean of whether this Page is an index file or not.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:176
  def index?; end

  # Returns the object as a debug String.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:166
  def inspect; end

  # Returns the value of attribute name.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:9
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:9
  def name=(_arg0); end

  # Returns the value of attribute output.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:10
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:10
  def output=(_arg0); end

  # Returns the value of attribute pager.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:8
  def pager; end

  # Sets the attribute pager
  #
  # @param value the value to set the attribute pager to.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:8
  def pager=(_arg0); end

  # The path to the source file
  #
  # Returns the path to the source file
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:141
  def path; end

  # The full path and filename of the post. Defined in the YAML of the post
  # body.
  #
  # Returns the String permalink or nil if none has been set.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:74
  def permalink; end

  # Extract information from the page filename.
  #
  # name - The String filename of the page file.
  #
  # NOTE: `String#gsub` removes all trailing periods (in comparison to `String#chomp`)
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:118
  def process(name); end

  # The path to the page source file, relative to the site source
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:146
  def relative_path; end

  # Add any necessary layouts to this post
  #
  # layouts      - The Hash of {"name" => "layout"}.
  # site_payload - The site payload Hash.
  #
  # Returns String rendered page.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:131
  def render(layouts, site_payload); end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:8
  def site; end

  # Sets the attribute site
  #
  # @param value the value to set the attribute site to.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:8
  def site=(_arg0); end

  # The template of the permalink.
  #
  # Returns the template String.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:81
  def template; end

  # source://jekyll-4.2.2/lib/jekyll/page.rb:180
  def trigger_hooks(hook_name, *args); end

  # source://jekyll-readme-index-0.3.0/lib/jekyll/static_file_ext.rb:14
  def update_permalink; end

  # The generated relative url of this page. e.g. /about.html.
  #
  # Returns the String url.
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:94
  def url; end

  # Returns a hash of URL placeholder names (as symbols) mapping to the
  # desired placeholder replacements. For details see "url.rb"
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:104
  def url_placeholders; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/page.rb:184
  def write?; end

  private

  # source://jekyll-4.2.2/lib/jekyll/page.rb:204
  def generate_excerpt; end

  # source://jekyll-4.2.2/lib/jekyll/page.rb:210
  def url_dir; end
end

# Attributes for Liquid templates
#
# source://jekyll-4.2.2/lib/jekyll/page.rb:15
Jekyll::Page::ATTRIBUTES_FOR_LIQUID = T.let(T.unsafe(nil), Array)

# A set of extensions that are considered HTML or HTML-like so we
# should not alter them,  this includes .xhtml through XHTM5.
#
# source://jekyll-4.2.2/lib/jekyll/page.rb:27
Jekyll::Page::HTML_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/page_excerpt.rb:4
class Jekyll::PageExcerpt < ::Jekyll::Excerpt
  # Returns the value of attribute doc.
  #
  # source://jekyll-4.2.2/lib/jekyll/page_excerpt.rb:5
  def doc; end

  # source://jekyll-4.2.2/lib/jekyll/excerpt.rb:51
  def id; end

  # source://jekyll-4.2.2/lib/jekyll/page_excerpt.rb:21
  def inspect; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/page_excerpt.rb:15
  def render_with_liquid?; end

  # source://jekyll-4.2.2/lib/jekyll/page_excerpt.rb:11
  def to_liquid; end
end

# source://jekyll-4.2.2/lib/jekyll/page_excerpt.rb:8
Jekyll::PageExcerpt::EXCERPT_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/readers/page_reader.rb:4
class Jekyll::PageReader
  # @return [PageReader] a new instance of PageReader
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/page_reader.rb:7
  def initialize(site, dir); end

  # Returns the value of attribute dir.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/page_reader.rb:5
  def dir; end

  # Create a new `Jekyll::Page` object for each entry in a given array.
  #
  # files - An array of file names inside `@dir`
  #
  # Returns an array of publishable `Jekyll::Page` objects.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/page_reader.rb:18
  def read(files); end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/page_reader.rb:5
  def site; end

  # Returns the value of attribute unfiltered_content.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/page_reader.rb:5
  def unfiltered_content; end
end

# A Jekyll::Page subclass to handle processing files without reading it to
# determine the page-data and page-content based on Front Matter delimiters.
#
# The class instance is basically just a bare-bones entity with just
# attributes "dir", "name", "path", "url" defined on it.
#
# source://jekyll-4.2.2/lib/jekyll/page_without_a_file.rb:9
class Jekyll::PageWithoutAFile < ::Jekyll::Page
  # source://jekyll-4.2.2/lib/jekyll/page_without_a_file.rb:10
  def read_yaml(*_arg0); end
end

# A singleton class that caches frozen instances of path strings returned from its methods.
#
# NOTE:
#   This class exists because `File.join` allocates an Array and returns a new String on every
#   call using **the same arguments**. Caching the result means reduced memory usage.
#   However, the caches are never flushed so that they can be used even when a site is
#   regenerating. The results are frozen to deter mutation of the cached string.
#
#   Therefore, employ this class only for situations where caching the result is necessary
#   for performance reasons.
#
# source://jekyll-4.2.2/lib/jekyll/path_manager.rb:15
class Jekyll::PathManager
  class << self
    # Wraps `File.join` to cache the frozen result.
    # Reassigns `nil`, empty strings and empty arrays to a frozen empty string beforehand.
    #
    # Returns a frozen string.
    #
    # source://jekyll-4.2.2/lib/jekyll/path_manager.rb:24
    def join(base, item); end

    # Ensures the questionable path is prefixed with the base directory
    # and prepends the questionable path with the base directory if false.
    #
    # Returns a frozen string.
    #
    # source://jekyll-4.2.2/lib/jekyll/path_manager.rb:36
    def sanitized_path(base_directory, questionable_path); end

    private

    # source://jekyll-4.2.2/lib/jekyll/path_manager.rb:50
    def sanitize_and_join(base_directory, questionable_path); end

    # source://jekyll-4.2.2/lib/jekyll/path_manager.rb:68
    def slashed_dir_cache(base_directory); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/plugin.rb:4
class Jekyll::Plugin
  # Initialize a new plugin. This should be overridden by the subclass.
  #
  # config - The Hash of configuration options.
  #
  # Returns a new instance.
  #
  # @return [Plugin] a new instance of Plugin
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin.rb:88
  def initialize(config = T.unsafe(nil)); end

  # Spaceship is priority [higher -> lower]
  #
  # other - The class to be compared.
  #
  # Returns -1, 0, 1.
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin.rb:79
  def <=>(other); end

  class << self
    # Spaceship is priority [higher -> lower]
    #
    # other - The class to be compared.
    #
    # Returns -1, 0, 1.
    #
    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:70
    def <=>(other); end

    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:23
    def catch_inheritance(const); end

    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:32
    def descendants; end

    # @private
    #
    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:15
    def inherited(const); end

    # Get or set the priority of this plugin. When called without an
    # argument it returns the priority. When an argument is given, it will
    # set the priority.
    #
    # priority - The Symbol priority (default: nil). Valid options are:
    #            :lowest, :low, :normal, :high, :highest
    #
    # Returns the Symbol priority.
    #
    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:47
    def priority(priority = T.unsafe(nil)); end

    # Get or set the safety of this plugin. When called without an argument
    # it returns the safety. When an argument is given, it will set the
    # safety.
    #
    # safe - The Boolean safety (default: nil).
    #
    # Returns the safety Boolean.
    #
    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:60
    def safe(safe = T.unsafe(nil)); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/plugin.rb:5
Jekyll::Plugin::PRIORITIES = T.let(T.unsafe(nil), Hash)

# source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:4
class Jekyll::PluginManager
  # Create an instance of this class.
  #
  # site - the instance of Jekyll::Site we're concerned with
  #
  # Returns nothing
  #
  # @return [PluginManager] a new instance of PluginManager
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:12
  def initialize(site); end

  # Require all the plugins which are allowed.
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:19
  def conscientious_require; end

  # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:105
  def deprecation_checks; end

  # Check whether a gem plugin is allowed to be used during this build.
  #
  # plugin_name - the name of the plugin
  #
  # Returns true if the plugin name is in the whitelist or if the site is not
  #   in safe mode.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:70
  def plugin_allowed?(plugin_name); end

  # Public: Setup the plugin search path
  #
  # Returns an Array of plugin search paths
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:97
  def plugins_path; end

  # Require each of the gem plugins specified.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:29
  def require_gems; end

  # Require all .rb files if safe mode is off
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:85
  def require_plugin_files; end

  # Require each of the runtime_dependencies specified by the theme's gemspec.
  #
  # Returns false only if no dependencies have been specified, otherwise nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:38
  def require_theme_deps; end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:5
  def site; end

  # Build an array of allowed plugin gem names.
  #
  # Returns an array of strings, each string being the name of a gem name
  #   that is allowed to be used.
  #
  # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:78
  def whitelist; end

  class << self
    # source://jekyll-4.2.2/lib/jekyll/plugin_manager.rb:48
    def require_from_bundler; end
  end
end

# source://jekyll-4.2.2/lib/jekyll/readers/post_reader.rb:4
class Jekyll::PostReader
  # @return [PostReader] a new instance of PostReader
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/post_reader.rb:7
  def initialize(site); end

  # Read all the content files from <source>/<dir>/magic_dir
  #   and return them with the type klass.
  #
  # dir - The String relative path of the directory to read.
  # magic_dir - The String relative directory to <dir>,
  #   looks for content here.
  # klass - The return type of the content.
  #
  # Returns klass type of content files
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/post_reader.rb:52
  def read_content(dir, magic_dir, matcher); end

  # Read all the files in <source>/<dir>/_drafts and create a new
  # Document object with each one.
  #
  # dir - The String relative path of the directory to read.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/post_reader.rb:17
  def read_drafts(dir); end

  # Read all the files in <source>/<dir>/_posts and create a new Document
  # object with each one.
  #
  # dir - The String relative path of the directory to read.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/post_reader.rb:27
  def read_posts(dir); end

  # Read all the files in <source>/<dir>/<magic_dir> and create a new
  # Document object with each one insofar as it matches the regexp matcher.
  #
  # dir - The String relative path of the directory to read.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/post_reader.rb:37
  def read_publishable(dir, magic_dir, matcher); end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/post_reader.rb:5
  def site; end

  # Returns the value of attribute unfiltered_content.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/post_reader.rb:5
  def unfiltered_content; end

  private

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/post_reader.rb:65
  def processable?(doc); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/post_reader.rb:77
  def publishable?(doc); end
end

# source://jekyll-4.2.2/lib/jekyll/profiler.rb:4
class Jekyll::Profiler
  # @return [Profiler] a new instance of Profiler
  #
  # source://jekyll-4.2.2/lib/jekyll/profiler.rb:33
  def initialize(site); end

  # source://jekyll-4.2.2/lib/jekyll/profiler.rb:37
  def profile_process; end

  class << self
    # source://jekyll-4.2.2/lib/jekyll/profiler.rb:12
    def tabulate(table_rows); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/profiler.rb:5
Jekyll::Profiler::TERMINAL_TABLE_STYLES = T.let(T.unsafe(nil), Hash)

# source://jekyll-4.2.2/lib/jekyll/publisher.rb:4
class Jekyll::Publisher
  # @return [Publisher] a new instance of Publisher
  #
  # source://jekyll-4.2.2/lib/jekyll/publisher.rb:5
  def initialize(site); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/publisher.rb:13
  def hidden_in_the_future?(thing); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/publisher.rb:9
  def publish?(thing); end

  private

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/publisher.rb:19
  def can_be_published?(thing); end
end

# source://jekyll-4.2.2/lib/jekyll/reader.rb:4
class Jekyll::Reader
  # @return [Reader] a new instance of Reader
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:7
  def initialize(site); end

  # Filter out any files/directories that are hidden or backup files (start
  # with "." or "#" or end with "~"), or contain site content (start with "_"),
  # or are excluded in the site configuration, unless they are web server
  # files such as '.htaccess'.
  #
  # entries - The Array of String file/directory entries to filter.
  # base_directory - The string representing the optional base directory.
  #
  # Returns the Array of filtered entries.
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:124
  def filter_entries(entries, base_directory = T.unsafe(nil)); end

  # Read the entries from a particular directory for processing
  #
  # dir - The String representing the relative path of the directory to read.
  # subfolder - The String representing the directory to read.
  #
  # Returns the list of entries to process
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:134
  def get_entries(dir, subfolder); end

  # Read Site data from disk and load it into internal data structures.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:14
  def read; end

  # Recursively traverse directories to find pages and static files
  # that will become part of the site according to the rules in
  # filter_entries.
  #
  # dir - The String relative path of the directory to read. Default: ''.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:38
  def read_directories(dir = T.unsafe(nil)); end

  # Recursively traverse directories with the read_directories function.
  #
  # base - The String representing the site's base directory.
  # dir - The String representing the directory to traverse down.
  # dot_dirs - The Array of subdirectories in the dir.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:85
  def retrieve_dirs(_base, dir, dot_dirs); end

  # Retrieve all the pages from the current directory,
  # add them to the site and sort them.
  #
  # dir - The String representing the directory retrieve the pages from.
  # dot_pages - The Array of pages in the dir.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:100
  def retrieve_pages(dir, dot_pages); end

  # Retrieves all the posts(posts/drafts) from the given directory
  # and add them to the site and sort them.
  #
  # dir - The String representing the directory to retrieve the posts from.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:71
  def retrieve_posts(dir); end

  # Retrieve all the static files from the current directory,
  # add them to the site and sort them.
  #
  # dir - The directory retrieve the static files from.
  # dot_static_files - The static files in the dir.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:111
  def retrieve_static_files(dir, dot_static_files); end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:5
  def site; end

  # Sorts posts, pages, and static files.
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:25
  def sort_files!; end

  private

  # source://jekyll-4.2.2/lib/jekyll/reader.rb:183
  def conditionally_generate_entry(entry_path, container, reader); end

  # Internal
  #
  # Determine if the directory is supposed to contain posts and drafts.
  # If the user has defined a custom collections_dir, then attempt to read
  # posts and drafts only from within that directory.
  #
  # Returns true if a custom collections_dir has been set but current directory lies
  # outside that directory.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:152
  def outside_configured_directory?(dir); end

  # Create a single PostReader instance to retrieve drafts and posts from all valid
  # directories in current site.
  #
  # source://jekyll-4.2.2/lib/jekyll/reader.rb:159
  def post_reader; end

  # source://jekyll-4.2.2/lib/jekyll/reader.rb:163
  def read_included_excludes; end

  # source://jekyll-4.2.2/lib/jekyll/reader.rb:175
  def read_included_file(entry_path); end
end

# source://jekyll-4.2.2/lib/jekyll/regenerator.rb:4
class Jekyll::Regenerator
  # @return [Regenerator] a new instance of Regenerator
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:9
  def initialize(site); end

  # Add a path to the metadata
  #
  # Returns true, also on failure.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:40
  def add(path); end

  # Add a dependency of a path
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:106
  def add_dependency(path, dependency); end

  # Returns the value of attribute cache.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:5
  def cache; end

  # Clear the metadata and cache
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:60
  def clear; end

  # Clear just the cache
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:68
  def clear_cache; end

  # Check if metadata has been disabled
  #
  # Returns a Boolean (true for disabled, false for enabled).
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:136
  def disabled?; end

  # Force a path to regenerate
  #
  # Returns true.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:53
  def force(path); end

  # Returns the value of attribute metadata.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:5
  def metadata; end

  # Produce the absolute path of the metadata file
  #
  # Returns the String path of the file.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:129
  def metadata_file; end

  # Checks if a path's (or one of its dependencies)
  # mtime has changed
  #
  # Returns a boolean.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:84
  def modified?(path); end

  # Checks if a renderable object needs to be regenerated
  #
  # Returns a boolean.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:22
  def regenerate?(document); end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:5
  def site; end

  # Checks if the source has been modified or the
  # destination is missing
  #
  # returns a boolean
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:76
  def source_modified_or_dest_missing?(source_path, dest_path); end

  # Write the metadata to disk
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:119
  def write_metadata; end

  private

  # Returns the value of attribute disabled.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:6
  def disabled; end

  # Sets the attribute disabled
  #
  # @param value the value to set the attribute disabled to.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:6
  def disabled=(_arg0); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:179
  def existing_file_modified?(path); end

  # Read metadata from the metadata file, if no file is found,
  # initialize with an empty hash
  #
  # Returns the read metadata.
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:147
  def read_metadata; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:172
  def regenerate_document?(document); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/regenerator.rb:165
  def regenerate_page?(document); end
end

# source://jekyll-4.2.2/lib/jekyll/related_posts.rb:4
class Jekyll::RelatedPosts
  # @return [RelatedPosts] a new instance of RelatedPosts
  #
  # source://jekyll-4.2.2/lib/jekyll/related_posts.rb:11
  def initialize(post); end

  # source://jekyll-4.2.2/lib/jekyll/related_posts.rb:17
  def build; end

  # source://jekyll-4.2.2/lib/jekyll/related_posts.rb:28
  def build_index; end

  # source://jekyll-4.2.2/lib/jekyll/related_posts.rb:44
  def lsi_related_posts; end

  # source://jekyll-4.2.2/lib/jekyll/related_posts.rb:48
  def most_recent_posts; end

  # Returns the value of attribute post.
  #
  # source://jekyll-4.2.2/lib/jekyll/related_posts.rb:9
  def post; end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/related_posts.rb:9
  def site; end

  class << self
    # Returns the value of attribute lsi.
    #
    # source://jekyll-4.2.2/lib/jekyll/related_posts.rb:6
    def lsi; end

    # Sets the attribute lsi
    #
    # @param value the value to set the attribute lsi to.
    #
    # source://jekyll-4.2.2/lib/jekyll/related_posts.rb:6
    def lsi=(_arg0); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/renderer.rb:4
class Jekyll::Renderer
  # @return [Renderer] a new instance of Renderer
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:8
  def initialize(site, document, site_payload = T.unsafe(nil)); end

  # Convert the document using the converters which match this renderer's document.
  #
  # Returns String the converted content.
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:103
  def convert(content); end

  # Determine which converters to use based on this document's
  # extension.
  #
  # Returns Array of Converter instances.
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:38
  def converters; end

  # Returns the value of attribute document.
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:5
  def document; end

  # Checks if the layout specified in the document actually exists
  #
  # layout - the layout to check
  #
  # Returns Boolean true if the layout is invalid, false if otherwise
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:145
  def invalid_layout?(layout); end

  # The list of layouts registered for this Renderer.
  # It can be written with #layouts=(new_layouts)
  # Falls back to site.layouts if no layouts are registered.
  #
  # Returns a Hash of String => Jekyll::Layout identified
  # as basename without the extension name.
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:30
  def layouts; end

  # Sets the attribute layouts
  #
  # @param value the value to set the attribute layouts to.
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:6
  def layouts=(_arg0); end

  # Determine the extname the outputted file should have
  #
  # Returns String the output extname including the leading period.
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:45
  def output_ext; end

  # Fetches the payload used in Liquid rendering.
  # It can be written with #payload=(new_payload)
  # Falls back to site.site_payload if no payload is set.
  #
  # Returns a Jekyll::Drops::UnifiedPayloadDrop
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:20
  def payload; end

  # Sets the attribute payload
  #
  # @param value the value to set the attribute payload to.
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:6
  def payload=(_arg0); end

  # Render layouts and place document content inside.
  #
  # Returns String rendered content
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:152
  def place_in_layouts(content, payload, info); end

  # Render the document.
  #
  # Returns String rendered document output
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:70
  def render_document; end

  # Render the given content with the payload and info
  #
  # content -
  # payload -
  # info    -
  # path    - (optional) the path to the file, for use in ex
  #
  # Returns String the content, rendered by Liquid.
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:125
  def render_liquid(content, payload, info, path = T.unsafe(nil)); end

  # Prepare payload and render the document
  #
  # Returns String rendered document output
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:52
  def run; end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:5
  def site; end

  private

  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:202
  def add_regenerator_dependencies(layout); end

  # Set related posts to payload if document is a post.
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:222
  def assign_current_document!; end

  # Set highlighter prefix and suffix
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:229
  def assign_highlighter_options!; end

  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:234
  def assign_layout_data!; end

  # Set page content to payload and assign pager if document has one.
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:214
  def assign_pages!; end

  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:247
  def converter_output_ext; end

  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:261
  def liquid_options; end

  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:255
  def output_exts; end

  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:239
  def permalink_ext; end

  # Render layout content into document.output
  #
  # Returns String rendered content
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:190
  def render_layout(output, layout, info); end

  # Checks if the layout specified in the document actually exists
  #
  # layout - the layout to check
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/renderer.rb:180
  def validate_layout(layout); end
end

# source://jekyll-4.2.2/lib/jekyll/site.rb:4
class Jekyll::Site
  # Public: Initialize a new Site.
  #
  # config - A Hash containing site configuration details.
  #
  # @return [Site] a new instance of Site
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:18
  def initialize(config); end

  # Returns the value of attribute baseurl.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def baseurl; end

  # Sets the attribute baseurl
  #
  # @param value the value to set the attribute baseurl to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def baseurl=(_arg0); end

  # Returns the value of attribute cache_dir.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:5
  def cache_dir; end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:272
  def categories; end

  # Remove orphaned files and empty directories in destination.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:220
  def cleanup; end

  # The list of collection names.
  #
  # Returns an array of collection names from the configuration,
  #   or an empty array if the `collections` key is not set.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:164
  def collection_names; end

  # The list of collections and their corresponding Jekyll::Collection instances.
  # If config['collections'] is set, a new instance is created
  # for each item in the collection, a new hash is returned otherwise.
  #
  # Returns a Hash containing collection name-to-instance pairs.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:154
  def collections; end

  # Public: The full path to the directory that houses all the collections registered
  # with the current site.
  #
  # Returns the source directory or the absolute path to the custom collections_dir
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:440
  def collections_path; end

  # Returns the value of attribute config.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:5
  def config; end

  # Public: Set the site's configuration. This handles side-effects caused by
  # changing values in the configuration.
  #
  # config - a Jekyll::Configuration, containing the new configuration.
  #
  # Returns the new configuration.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:47
  def config=(config); end

  # Returns the value of attribute converters.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:12
  def converters; end

  # Sets the attribute converters
  #
  # @param value the value to set the attribute converters to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:12
  def converters=(_arg0); end

  # Returns the value of attribute data.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def data=(_arg0); end

  # Returns the value of attribute dest.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:5
  def dest; end

  # Get the to be written documents
  #
  # Returns an Array of Documents which should be written
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:342
  def docs_to_write; end

  # Get all the documents
  #
  # Returns an Array of all Documents
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:349
  def documents; end

  # Returns the value of attribute drafts.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def drafts; end

  # Sets the attribute drafts
  #
  # @param value the value to set the attribute drafts to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def drafts=(_arg0); end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:355
  def each_site_file; end

  # Check that the destination dir isn't the source dir or a directory
  # parent to the source dir.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:139
  def ensure_not_in_dest; end

  # Returns the value of attribute exclude.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def exclude; end

  # Sets the attribute exclude
  #
  # @param value the value to set the attribute exclude to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def exclude=(_arg0); end

  # Returns the value of attribute file_read_opts.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def file_read_opts; end

  # Sets the attribute file_read_opts
  #
  # @param value the value to set the attribute file_read_opts to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def file_read_opts=(_arg0); end

  # Returns the value of attribute filter_cache.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:13
  def filter_cache; end

  # Get the implementation class for the given Converter.
  # Returns the Converter instance implementing the given Converter.
  # klass - The Class of the Converter to fetch.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:305
  def find_converter_instance(klass); end

  # Returns the FrontmatterDefaults or creates a new FrontmatterDefaults
  # if it doesn't already exist.
  #
  # Returns The FrontmatterDefaults
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:367
  def frontmatter_defaults; end

  # Returns the value of attribute future.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def future; end

  # Sets the attribute future
  #
  # @param value the value to set the attribute future to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def future=(_arg0); end

  # Returns the value of attribute gems.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def gems; end

  # Sets the attribute gems
  #
  # @param value the value to set the attribute gems to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def gems=(_arg0); end

  # Run each of the Generators.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:190
  def generate; end

  # Returns the value of attribute generators.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:12
  def generators; end

  # Sets the attribute generators
  #
  # @param value the value to set the attribute generators to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:12
  def generators=(_arg0); end

  # Returns the value of attribute highlighter.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def highlighter; end

  # Sets the attribute highlighter
  #
  # @param value the value to set the attribute highlighter to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def highlighter=(_arg0); end

  # Public: Prefix a given path with the cache directory.
  #
  # paths - (optional) path elements to a file or directory within the
  #         cache directory
  #
  # Returns a path which is prefixed with the cache directory.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:430
  def in_cache_dir(*paths); end

  # Public: Prefix a given path with the destination directory.
  #
  # paths - (optional) path elements to a file or directory within the
  #         destination directory
  #
  # Returns a path which is prefixed with the destination directory.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:418
  def in_dest_dir(*paths); end

  # Public: Prefix a given path with the source directory.
  #
  # paths - (optional) path elements to a file or directory within the
  #         source directory
  #
  # Returns a path which is prefixed with the source directory.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:392
  def in_source_dir(*paths); end

  # Public: Prefix a given path with the theme directory.
  #
  # paths - (optional) path elements to a file or directory within the
  #         theme directory
  #
  # Returns a path which is prefixed with the theme root directory.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:404
  def in_theme_dir(*paths); end

  # Returns the value of attribute include.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def include; end

  # Sets the attribute include
  #
  # @param value the value to set the attribute include to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def include=(_arg0); end

  # Returns the value of attribute includes_load_paths.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:13
  def includes_load_paths; end

  # Returns the value of attribute inclusions.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def inclusions; end

  # Sets the attribute inclusions
  #
  # @param value the value to set the attribute inclusions to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def inclusions=(_arg0); end

  # Whether to perform a full rebuild without incremental regeneration
  #
  # Returns a Boolean: true for a full rebuild, false for normal build
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:374
  def incremental?(override = T.unsafe(nil)); end

  # Public
  #
  # Returns the object as a debug String.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:448
  def inspect; end

  # klass - class or module containing the subclasses.
  # Returns array of instances of subclasses of parameter.
  # Create array of instances of the subclasses of the class or module
  # passed in as argument.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:318
  def instantiate_subclasses(klass); end

  # Returns the value of attribute keep_files.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def keep_files; end

  # Sets the attribute keep_files
  #
  # @param value the value to set the attribute keep_files to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def keep_files=(_arg0); end

  # Returns the value of attribute layouts.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def layouts; end

  # Sets the attribute layouts
  #
  # @param value the value to set the attribute layouts to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def layouts=(_arg0); end

  # Returns the value of attribute limit_posts.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def limit_posts; end

  # Sets the attribute limit_posts
  #
  # @param value the value to set the attribute limit_posts to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def limit_posts=(_arg0); end

  # Returns the value of attribute liquid_renderer.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:13
  def liquid_renderer; end

  # Returns the value of attribute lsi.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def lsi; end

  # Sets the attribute lsi
  #
  # @param value the value to set the attribute lsi to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def lsi=(_arg0); end

  # Returns the value of attribute pages.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def pages; end

  # Sets the attribute pages
  #
  # @param value the value to set the attribute pages to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def pages=(_arg0); end

  # Returns the value of attribute permalink_style.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def permalink_style; end

  # Sets the attribute permalink_style
  #
  # @param value the value to set the attribute permalink_style to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def permalink_style=(_arg0); end

  # Returns the value of attribute plugin_manager.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def plugin_manager; end

  # Sets the attribute plugin_manager
  #
  # @param value the value to set the attribute plugin_manager to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def plugin_manager=(_arg0); end

  # Returns the value of attribute plugins.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def plugins; end

  # Sets the attribute plugins
  #
  # @param value the value to set the attribute plugins to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def plugins=(_arg0); end

  # Construct a Hash of Posts indexed by the specified Post attribute.
  #
  # post_attr - The String name of the Post attribute.
  #
  # Examples
  #
  #   post_attr_hash('categories')
  #   # => { 'tech' => [<Post A>, <Post B>],
  #   #      'ruby' => [<Post B>] }
  #
  # Returns the Hash: { attr => posts } where
  #   attr  - One of the values for the requested attribute.
  #   posts - The Array of Posts with the given attr value.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:255
  def post_attr_hash(post_attr); end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:238
  def posts; end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:85
  def print_stats; end

  # Public: Read, process, and write this Site to output.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:74
  def process; end

  # Returns the value of attribute profiler.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:13
  def profiler; end

  # Returns the publisher or creates a new publisher if it doesn't
  # already exist.
  #
  # Returns The Publisher
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:382
  def publisher; end

  # Read Site data from disk and load it into internal data structures.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:180
  def read; end

  # Returns the value of attribute reader.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:12
  def reader; end

  # Sets the attribute reader
  #
  # @param value the value to set the attribute reader to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:12
  def reader=(_arg0); end

  # Returns the value of attribute regenerator.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:13
  def regenerator; end

  # Warns the user if permanent links are relative to the parent
  # directory. As this is a deprecated function of Jekyll.
  #
  # Returns
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:329
  def relative_permalinks_are_deprecated; end

  # Render the site to the destination.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:203
  def render; end

  #
  # Reset Site details.
  #
  # Returns nothing
  #
  # @raise [ArgumentError]
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:95
  def reset; end

  # Returns the value of attribute safe.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def safe; end

  # Sets the attribute safe
  #
  # @param value the value to set the attribute safe to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def safe=(_arg0); end

  # Load necessary libraries, plugins, converters, and generators.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:128
  def setup; end

  # Returns the value of attribute show_drafts.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def show_drafts; end

  # Sets the attribute show_drafts
  #
  # @param value the value to set the attribute show_drafts to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def show_drafts=(_arg0); end

  # Prepare site data for site payload. The method maintains backward compatibility
  # if the key 'data' is already used in _config.yml.
  #
  # Returns the Hash to be hooked to site.data.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:280
  def site_data; end

  # The Hash payload containing site-wide data.
  #
  # Returns the Hash: { "site" => data } where data is a Hash with keys:
  #   "time"       - The Time as specified in the configuration or the
  #                  current time if none was specified.
  #   "posts"      - The Array of Posts, sorted chronologically by post date
  #                  and then title.
  #   "pages"      - The Array of all Pages.
  #   "html_pages" - The Array of HTML Pages.
  #   "categories" - The Hash of category values and Posts.
  #                  See Site#post_attr_hash for type info.
  #   "tags"       - The Hash of tag values and Posts.
  #                  See Site#post_attr_hash for type info.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:297
  def site_payload; end

  # Returns the value of attribute source.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:5
  def source; end

  # Returns the value of attribute static_files.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def static_files; end

  # Sets the attribute static_files
  #
  # @param value the value to set the attribute static_files to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def static_files=(_arg0); end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:268
  def tags; end

  # Returns the value of attribute theme.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def theme; end

  # Sets the attribute theme
  #
  # @param value the value to set the attribute theme to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def theme=(_arg0); end

  # Returns the value of attribute time.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def time; end

  # Sets the attribute time
  #
  # @param value the value to set the attribute time to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def time=(_arg0); end

  # The Hash payload containing site-wide data.
  #
  # Returns the Hash: { "site" => data } where data is a Hash with keys:
  #   "time"       - The Time as specified in the configuration or the
  #                  current time if none was specified.
  #   "posts"      - The Array of Posts, sorted chronologically by post date
  #                  and then title.
  #   "pages"      - The Array of all Pages.
  #   "html_pages" - The Array of HTML Pages.
  #   "categories" - The Hash of category values and Posts.
  #                  See Site#post_attr_hash for type info.
  #   "tags"       - The Hash of tag values and Posts.
  #                  See Site#post_attr_hash for type info.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:297
  def to_liquid; end

  # Returns the value of attribute unpublished.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def unpublished; end

  # Sets the attribute unpublished
  #
  # @param value the value to set the attribute unpublished to.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:6
  def unpublished=(_arg0); end

  # Write static files, pages, and posts.
  #
  # Returns nothing.
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:228
  def write; end

  private

  # Disable Marshaling cache to disk in Safe Mode
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:494
  def configure_cache; end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:523
  def configure_file_read_opts; end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:518
  def configure_include_paths; end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:499
  def configure_plugins; end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:504
  def configure_theme; end

  # Limits the current posts; removes the posts which exceed the limit_posts
  #
  # Returns nothing
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:478
  def limit_posts!; end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:454
  def load_theme_configuration(config); end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:529
  def render_docs(payload); end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:537
  def render_pages(payload); end

  # source://jekyll-4.2.2/lib/jekyll/site.rb:543
  def render_regenerated(document, payload); end

  # Returns the Cleaner or creates a new Cleaner if it doesn't
  # already exist.
  #
  # Returns The Cleaner
  #
  # source://jekyll-4.2.2/lib/jekyll/site.rb:489
  def site_cleaner; end
end

# source://jekyll-4.2.2/lib/jekyll/static_file.rb:4
class Jekyll::StaticFile
  extend ::Forwardable

  # Initialize a new StaticFile.
  #
  # site - The Site.
  # base - The String path to the <source>.
  # dir  - The String path between <source> and the file.
  # name - The String filename of the file.
  #
  # @return [StaticFile] a new instance of StaticFile
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:29
  def initialize(site, base, dir, name, collection = T.unsafe(nil)); end

  # Generate "basename without extension" and strip away any trailing periods.
  # NOTE: `String#gsub` removes all trailing periods (in comparison to `String#chomp`)
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:125
  def basename; end

  # Similar to Jekyll::Document#cleaned_relative_path.
  # Generates a relative path with the collection's directory removed when applicable
  #   and additionally removes any multiple periods in the string.
  #
  # NOTE: `String#gsub!` removes all trailing periods (in comparison to `String#chomp!`)
  #
  # Examples:
  #   When `relative_path` is "_methods/site/my-cool-avatar...png":
  #     cleaned_relative_path
  #     # => "/site/my-cool-avatar"
  #
  # Returns the cleaned relative path of the static file.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:151
  def cleaned_relative_path; end

  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:115
  def data; end

  # Returns the front matter defaults defined for the file's URL and/or type
  # as defined in _config.yml.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:184
  def defaults; end

  # Obtain destination path.
  #
  # dest - The String path to the destination dir.
  #
  # Returns destination file path.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:57
  def destination(dest); end

  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:62
  def destination_rel_dir; end

  # Returns the value of attribute extname.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:7
  def extname; end

  # Returns a debug string on inspecting the static file.
  # Includes only the relative path of the object.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:190
  def inspect; end

  # Is source path modified?
  #
  # Returns true if modified since last write.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:82
  def modified?; end

  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:70
  def modified_time; end

  # Returns last modification time for this file.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:75
  def mtime; end

  # Returns the value of attribute name.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:7
  def name; end

  # Returns source file path.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:41
  def path; end

  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:129
  def placeholders; end

  # Returns the value of attribute relative_path.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:7
  def relative_path; end

  # source://RUBY_ROOT/forwardable.rb:229
  def to_json(*args, **_arg1, &block); end

  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:119
  def to_liquid; end

  # source://jekyll-readme-index-0.3.0/lib/jekyll/static_file_ext.rb:6
  def to_page; end

  # Returns the type of the collection if present, nil otherwise.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:178
  def type; end

  # Applies a similar URL-building technique as Jekyll::Document that takes
  # the collection's URL template into account. The default URL template can
  # be overriden in the collection's configuration in _config.yml.
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:163
  def url; end

  # Write the static file to the destination directory (if modified).
  #
  # dest - The String path to the destination dir.
  #
  # Returns false if the file was not modified since last time (no-op).
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:102
  def write(dest); end

  # Whether to write the file to the filesystem
  #
  # Returns true unless the defaults for the destination path from
  # _config.yml contain `published: false`.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:90
  def write?; end

  private

  # source://jekyll-4.2.2/lib/jekyll/static_file.rb:196
  def copy_file(dest_path); end

  class << self
    # The cache of last modification times [path] -> mtime.
    #
    # source://jekyll-4.2.2/lib/jekyll/static_file.rb:13
    def mtimes; end

    # source://jekyll-4.2.2/lib/jekyll/static_file.rb:17
    def reset_cache; end
  end
end

# source://jekyll-4.2.2/lib/jekyll/readers/static_file_reader.rb:4
class Jekyll::StaticFileReader
  # @return [StaticFileReader] a new instance of StaticFileReader
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/static_file_reader.rb:7
  def initialize(site, dir); end

  # Returns the value of attribute dir.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/static_file_reader.rb:5
  def dir; end

  # Create a new StaticFile object for every entry in a given list of basenames.
  #
  # files - an array of file basenames.
  #
  # Returns an array of static files.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/static_file_reader.rb:18
  def read(files); end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/static_file_reader.rb:5
  def site; end

  # Returns the value of attribute unfiltered_content.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/static_file_reader.rb:5
  def unfiltered_content; end
end

# source://jekyll-4.2.2/lib/jekyll/stevenson.rb:4
class Jekyll::Stevenson < ::Logger
  # @return [Stevenson] a new instance of Stevenson
  #
  # source://jekyll-4.2.2/lib/jekyll/stevenson.rb:5
  def initialize; end

  # source://jekyll-4.2.2/lib/jekyll/stevenson.rb:15
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # source://jekyll-4.2.2/lib/jekyll/stevenson.rb:46
  def close; end

  # Log an +ERROR+ message
  #
  # source://jekyll-4.2.2/lib/jekyll/stevenson.rb:42
  def error(progname = T.unsafe(nil), &block); end

  # Log a +WARN+ message
  #
  # source://jekyll-4.2.2/lib/jekyll/stevenson.rb:37
  def warn(progname = T.unsafe(nil), &block); end

  private

  # source://jekyll-4.2.2/lib/jekyll/stevenson.rb:52
  def logdevice(severity); end
end

# source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:4
module Jekyll::Tags; end

# source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:5
class Jekyll::Tags::HighlightBlock < ::Liquid::Block
  include ::Liquid::StandardFilters

  # @return [HighlightBlock] a new instance of HighlightBlock
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:15
  def initialize(tag_name, markup, tokens); end

  # source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:33
  def render(context); end

  private

  # source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:98
  def add_code_tag(code); end

  # source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:56
  def parse_options(input); end

  # source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:94
  def render_codehighlighter(code); end

  # source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:75
  def render_pygments(code, _context); end

  # source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:81
  def render_rouge(code); end
end

# source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:31
Jekyll::Tags::HighlightBlock::LEADING_OR_TRAILING_LINE_TERMINATORS = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:54
Jekyll::Tags::HighlightBlock::OPTIONS_REGEX = T.let(T.unsafe(nil), Regexp)

# The regular expression syntax checker. Start with the language specifier.
# Follow that by zero or more space separated options that take one of three
# forms: name, name=value, or name="<quoted list>"
#
# <quoted list> is a space-separated list of numbers
#
# source://jekyll-4.2.2/lib/jekyll/tags/highlight.rb:13
Jekyll::Tags::HighlightBlock::SYNTAX = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/tags/include.rb:251
class Jekyll::Tags::IncludeRelativeTag < ::Jekyll::Tags::IncludeTag
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:256
  def page_path(context); end

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:252
  def tag_includes_dirs(context); end

  private

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:265
  def resource_path(page, site); end
end

# source://jekyll-4.2.2/lib/jekyll/tags/include.rb:5
class Jekyll::Tags::IncludeTag < ::Liquid::Tag
  # @return [IncludeTag] a new instance of IncludeTag
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:19
  def initialize(tag_name, markup, tokens); end

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:131
  def add_include_to_dependency(site, path, context); end

  # Grab file read opts in the context
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:84
  def file_read_opts(context); end

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:140
  def load_cached_partial(path, context); end

  # @raise [IOError]
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:97
  def locate_include_file(context, file, safe); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:164
  def outside_site_source?(path, dir, safe); end

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:37
  def parse_params(context); end

  # This method allows to modify the file content by inheriting from the class.
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:175
  def read_file(file, context); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:168
  def realpath_prefixed_with?(path, dir); end

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:106
  def render(context); end

  # Render the variable if required
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:89
  def render_variable(context); end

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:33
  def syntax_example; end

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:93
  def tag_includes_dirs(context); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:160
  def valid_include_file?(path, dir, safe); end

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:53
  def validate_file_name(file); end

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:68
  def validate_params; end

  private

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:181
  def could_not_locate_message(file, includes_dirs, safe); end
end

# source://jekyll-4.2.2/lib/jekyll/tags/include.rb:15
Jekyll::Tags::IncludeTag::FULL_VALID_SYNTAX = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/tags/include.rb:17
Jekyll::Tags::IncludeTag::INVALID_SEQUENCES = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/tags/include.rb:16
Jekyll::Tags::IncludeTag::VALID_FILENAME_CHARS = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/tags/include.rb:6
Jekyll::Tags::IncludeTag::VALID_SYNTAX = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/tags/include.rb:10
Jekyll::Tags::IncludeTag::VARIABLE_SYNTAX = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/tags/link.rb:5
class Jekyll::Tags::Link < ::Liquid::Tag
  include ::Jekyll::Filters::URLFilters

  # @return [Link] a new instance of Link
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/link.rb:14
  def initialize(tag_name, relative_path, tokens); end

  # @raise [ArgumentError]
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/link.rb:20
  def render(context); end

  class << self
    # source://jekyll-4.2.2/lib/jekyll/tags/link.rb:9
    def tag_name; end
  end
end

# Do not inherit from this class.
# TODO: Merge into the `Jekyll::Tags::IncludeTag` in v5.0
#
# source://jekyll-4.2.2/lib/jekyll/tags/include.rb:194
class Jekyll::Tags::OptimizedIncludeTag < ::Jekyll::Tags::IncludeTag
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:195
  def render(context); end

  private

  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:236
  def add_include_to_dependency(inclusion, context); end

  # @raise [IOError]
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:214
  def locate_include_file(file); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:226
  def outside_scope?(path, dir); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:230
  def realpath_prefixed_with?(path, dir); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/include.rb:222
  def valid_include_file?(path, dir); end
end

# source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:5
class Jekyll::Tags::PostComparer
  # @return [PostComparer] a new instance of PostComparer
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:10
  def initialize(name); end

  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:30
  def ==(other); end

  # Returns the value of attribute date.
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:8
  def date; end

  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:34
  def deprecated_equality(other); end

  # Returns the value of attribute name.
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:8
  def name; end

  # Returns the value of attribute path.
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:8
  def path; end

  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:23
  def post_date; end

  # Returns the value of attribute slug.
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:8
  def slug; end

  private

  # Construct the directory-aware post slug for a Jekyll::Post
  #
  # other - the Jekyll::Post
  #
  # Returns the post slug with the subdirectory (relative to _posts)
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:48
  def post_slug(other); end
end

# source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:6
Jekyll::Tags::PostComparer::MATCHER = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:58
class Jekyll::Tags::PostUrl < ::Liquid::Tag
  include ::Jekyll::Filters::URLFilters

  # @return [PostUrl] a new instance of PostUrl
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:61
  def initialize(tag_name, post, tokens); end

  # @raise [Jekyll::Errors::PostURLError]
  #
  # source://jekyll-4.2.2/lib/jekyll/tags/post_url.rb:75
  def render(context); end
end

# source://jekyll-4.2.2/lib/jekyll/theme.rb:4
class Jekyll::Theme
  extend ::Forwardable

  # @return [Theme] a new instance of Theme
  #
  # source://jekyll-4.2.2/lib/jekyll/theme.rb:10
  def initialize(name); end

  # source://jekyll-4.2.2/lib/jekyll/theme.rb:42
  def assets_path; end

  # The name of theme directory
  #
  # source://jekyll-4.2.2/lib/jekyll/theme.rb:26
  def basename; end

  # source://jekyll-4.2.2/lib/jekyll/theme.rb:30
  def includes_path; end

  # source://jekyll-4.2.2/lib/jekyll/theme.rb:34
  def layouts_path; end

  # Returns the value of attribute name.
  #
  # source://jekyll-4.2.2/lib/jekyll/theme.rb:6
  def name; end

  # source://jekyll-4.2.2/lib/jekyll/theme.rb:16
  def root; end

  # source://jekyll-4.2.2/lib/jekyll/theme.rb:46
  def runtime_dependencies; end

  # source://jekyll-4.2.2/lib/jekyll/theme.rb:38
  def sass_path; end

  # source://RUBY_ROOT/forwardable.rb:229
  def version(*args, **_arg1, &block); end

  private

  # source://jekyll-4.2.2/lib/jekyll/theme.rb:79
  def gemspec; end

  # source://jekyll-4.2.2/lib/jekyll/theme.rb:68
  def log_realpath_exception(err, folder); end

  # source://jekyll-4.2.2/lib/jekyll/theme.rb:52
  def path_for(folder); end

  # source://jekyll-4.2.2/lib/jekyll/theme.rb:57
  def realpath_for(folder); end
end

# source://jekyll-4.2.2/lib/jekyll/readers/theme_assets_reader.rb:4
class Jekyll::ThemeAssetsReader
  # @return [ThemeAssetsReader] a new instance of ThemeAssetsReader
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/theme_assets_reader.rb:7
  def initialize(site); end

  # source://jekyll-4.2.2/lib/jekyll/readers/theme_assets_reader.rb:11
  def read; end

  # Returns the value of attribute site.
  #
  # source://jekyll-4.2.2/lib/jekyll/readers/theme_assets_reader.rb:5
  def site; end

  private

  # source://jekyll-4.2.2/lib/jekyll/readers/theme_assets_reader.rb:41
  def append_unless_exists(haystack, new_item); end

  # source://jekyll-4.2.2/lib/jekyll/readers/theme_assets_reader.rb:27
  def read_theme_asset(path); end
end

# source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:4
class Jekyll::ThemeBuilder
  # @return [ThemeBuilder] a new instance of ThemeBuilder
  #
  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:11
  def initialize(theme_name, opts); end

  # Returns the value of attribute code_of_conduct.
  #
  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:9
  def code_of_conduct; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:17
  def create!; end

  # Returns the value of attribute name.
  #
  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:9
  def name; end

  # Returns the value of attribute path.
  #
  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:9
  def path; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:29
  def user_email; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:25
  def user_name; end

  private

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:83
  def create_accessories; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:68
  def create_directories; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:78
  def create_gemspec; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:72
  def create_starter_files; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:50
  def erb; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:91
  def initialize_git_repo; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:54
  def mkdir_p(directories); end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:35
  def root; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:46
  def template(filename); end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:39
  def template_file(filename); end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:62
  def write_file(filename, contents); end
end

# source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:97
class Jekyll::ThemeBuilder::ERBRenderer
  extend ::Forwardable

  # @return [ERBRenderer] a new instance of ERBRenderer
  #
  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:104
  def initialize(theme_builder); end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:108
  def jekyll_version_with_minor; end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:116
  def render(contents); end

  # source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:112
  def theme_directories; end

  # source://RUBY_ROOT/forwardable.rb:229
  def theme_name(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def user_email(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def user_name(*args, **_arg1, &block); end
end

# source://jekyll-4.2.2/lib/jekyll/theme_builder.rb:5
Jekyll::ThemeBuilder::SCAFFOLD_DIRECTORIES = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/url.rb:13
class Jekyll::URL
  # options - One of :permalink or :template must be supplied.
  #           :template     - The String used as template for URL generation,
  #                           for example "/:path/:basename:output_ext", where
  #                           a placeholder is prefixed with a colon.
  #           :placeholders - A hash containing the placeholders which will be
  #                           replaced when used inside the template. E.g.
  #                           { "year" => Time.now.strftime("%Y") } would replace
  #                           the placeholder ":year" with the current year.
  #           :permalink    - If supplied, no URL will be generated from the
  #                           template. Instead, the given permalink will be
  #                           used as URL.
  #
  # @return [URL] a new instance of URL
  #
  # source://jekyll-4.2.2/lib/jekyll/url.rb:25
  def initialize(options); end

  # Internal: Generate the URL by replacing all placeholders with their
  # respective values in the given template
  #
  # Returns the unsanitized String URL
  #
  # source://jekyll-4.2.2/lib/jekyll/url.rb:60
  def generate_url(template); end

  # source://jekyll-4.2.2/lib/jekyll/url.rb:95
  def generate_url_from_drop(template); end

  # source://jekyll-4.2.2/lib/jekyll/url.rb:68
  def generate_url_from_hash(template); end

  # Generates a URL from the permalink
  #
  # Returns the _unsanitized String URL
  #
  # source://jekyll-4.2.2/lib/jekyll/url.rb:45
  def generated_permalink; end

  # Generates a URL from the template
  #
  # Returns the unsanitized String URL
  #
  # source://jekyll-4.2.2/lib/jekyll/url.rb:52
  def generated_url; end

  # We include underscores in keys to allow for 'i_month' and so forth.
  # This poses a problem for keys which are followed by an underscore
  # but the underscore is not part of the key, e.g. '/:month_:day'.
  # That should be :month and :day, but our key extraction regexp isn't
  # smart enough to know that so we have to make it an explicit
  # possibility.
  #
  # source://jekyll-4.2.2/lib/jekyll/url.rb:87
  def possible_keys(key); end

  # Returns a sanitized String URL, stripping "../../" and multiples of "/",
  # as well as the beginning "/" so we can enforce and ensure it.
  #
  # source://jekyll-4.2.2/lib/jekyll/url.rb:117
  def sanitize_url(str); end

  # The generated relative URL of the resource
  #
  # Returns the String URL
  #
  # source://jekyll-4.2.2/lib/jekyll/url.rb:38
  def to_s; end

  class << self
    # Escapes a path to be a valid URL path segment
    #
    # path - The path to be escaped.
    #
    # Examples:
    #
    #   URL.escape_path("/a b")
    #   # => "/a%20b"
    #
    # Returns the escaped path.
    #
    # source://jekyll-4.2.2/lib/jekyll/url.rb:134
    def escape_path(path); end

    # Unescapes a URL path segment
    #
    # path - The path to be unescaped.
    #
    # Examples:
    #
    #   URL.unescape_path("/a%20b")
    #   # => "/a b"
    #
    # Returns the unescaped path.
    #
    # source://jekyll-4.2.2/lib/jekyll/url.rb:160
    def unescape_path(path); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/utils.rb:4
module Jekyll::Utils
  extend ::Jekyll::Utils

  # Add an appropriate suffix to template so that it matches the specified
  # permalink style.
  #
  # template - permalink template without trailing slash or file extension
  # permalink_style - permalink style, either built-in or custom
  #
  # The returned permalink template will use the same ending style as
  # specified in permalink_style.  For example, if permalink_style contains a
  # trailing slash (or is :pretty, which indirectly has a trailing slash),
  # then so will the returned template.  If permalink_style has a trailing
  # ":output_ext" (or is :none, :date, or :ordinal) then so will the returned
  # template.  Otherwise, template will be returned without modification.
  #
  # Examples:
  #   add_permalink_suffix("/:basename", :pretty)
  #   # => "/:basename/"
  #
  #   add_permalink_suffix("/:basename", :date)
  #   # => "/:basename:output_ext"
  #
  #   add_permalink_suffix("/:basename", "/:year/:month/:title/")
  #   # => "/:basename/"
  #
  #   add_permalink_suffix("/:basename", "/:year/:month/:title")
  #   # => "/:basename"
  #
  # Returns the updated permalink template
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:252
  def add_permalink_suffix(template, permalink_style); end

  # Non-destructive version of deep_merge_hashes! See that method.
  #
  # Returns the merged hashes.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:28
  def deep_merge_hashes(master_hash, other_hash); end

  # Merges a master hash with another hash, recursively.
  #
  # master_hash - the "parent" hash whose values will be overridden
  # other_hash  - the other hash whose values will be persisted after the merge
  #
  # This code was lovingly stolen from some random gem:
  # http://gemjack.com/gems/tartan-0.1.1/classes/Hash.html
  #
  # Thanks to whoever made it.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:41
  def deep_merge_hashes!(target, overwrite); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:53
  def duplicable?(obj); end

  # Determine whether the given content string contains Liquid Tags or Vaiables
  #
  # Returns true is the string contains sequences of `{%` or `{{`
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:149
  def has_liquid_construct?(content); end

  # Determines whether a given file has
  #
  # Returns true if the YAML front matter is present.
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:140
  def has_yaml_header?(file); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:49
  def mergable?(value); end

  # Returns merged option hash for File.read of self.site (if exists)
  # and a given param
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:304
  def merged_file_read_opts(site, opts); end

  # Parse a date/time and throw an error if invalid
  #
  # input - the date/time to parse
  # msg - (optional) the error message to show the user
  #
  # Returns the parsed date if successful, throws a FatalException
  # if not
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:130
  def parse_date(input, msg = T.unsafe(nil)); end

  # Read array from the supplied hash favouring the singular key
  # and then the plural key, and handling any nil entries.
  #
  # hash - the hash to read from
  # singular_key - the singular key
  # plural_key - the plural key
  #
  # Returns an array
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:70
  def pluralized_array_from_hash(hash, singular_key, plural_key); end

  # Work the same way as Dir.glob but seperating the input into two parts
  # ('dir' + '/' + 'pattern') to make sure the first part('dir') does not act
  # as a pattern.
  #
  # For example, Dir.glob("path[/*") always returns an empty array,
  # because the method fails to find the closing pattern to '[' which is ']'
  #
  # Examples:
  #   safe_glob("path[", "*")
  #   # => ["path[/file1", "path[/file2"]
  #
  #   safe_glob("path", "*", File::FNM_DOTMATCH)
  #   # => ["path/.", "path/..", "path/file1"]
  #
  #   safe_glob("path", ["**", "*"])
  #   # => ["path[/file1", "path[/folder/file2"]
  #
  # dir      - the dir where glob will be executed under
  #           (the dir will be included to each result)
  # patterns - the patterns (or the pattern) which will be applied under the dir
  # flags    - the flags which will be applied to the pattern
  #
  # Returns matched pathes
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:291
  def safe_glob(dir, patterns, flags = T.unsafe(nil)); end

  # Slugify a filename or title.
  #
  # string - the filename or title to slugify
  # mode - how string is slugified
  # cased - whether to replace all uppercase letters with their
  # lowercase counterparts
  #
  # When mode is "none", return the given string.
  #
  # When mode is "raw", return the given string,
  # with every sequence of spaces characters replaced with a hyphen.
  #
  # When mode is "default" or nil, non-alphabetic characters are
  # replaced with a hyphen too.
  #
  # When mode is "pretty", some non-alphabetic characters (._~!$&'()+,;=@)
  # are not replaced with hyphen.
  #
  # When mode is "ascii", some everything else except ASCII characters
  # a-z (lowercase), A-Z (uppercase) and 0-9 (numbers) are not replaced with hyphen.
  #
  # When mode is "latin", the input string is first preprocessed so that
  # any letters with accents are replaced with the plain letter. Afterwards,
  # it follows the "default" mode of operation.
  #
  # If cased is true, all uppercase letters in the result string are
  # replaced with their lowercase counterparts.
  #
  # Examples:
  #   slugify("The _config.yml file")
  #   # => "the-config-yml-file"
  #
  #   slugify("The _config.yml file", "pretty")
  #   # => "the-_config.yml-file"
  #
  #   slugify("The _config.yml file", "pretty", true)
  #   # => "The-_config.yml file"
  #
  #   slugify("The _config.yml file", "ascii")
  #   # => "the-config-yml-file"
  #
  #   slugify("The _config.yml file", "latin")
  #   # => "the-config-yml-file"
  #
  # Returns the slugified string.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:201
  def slugify(string, mode: T.unsafe(nil), cased: T.unsafe(nil)); end

  # Apply #to_s to all keys in the Hash
  #
  # hash - the hash to which to apply this transformation
  #
  # Returns a new hash with stringified keys
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:119
  def stringify_hash_keys(hash); end

  # Apply #to_sym to all keys in the hash
  #
  # hash - the hash to which to apply this transformation
  #
  # Returns a new hash with symbolized keys
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:110
  def symbolize_hash_keys(hash); end

  # Takes a slug and turns it into a simple title.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:21
  def titleize_slug(slug); end

  # source://jekyll-4.2.2/lib/jekyll/utils.rb:97
  def transform_keys(hash); end

  # source://jekyll-4.2.2/lib/jekyll/utils.rb:85
  def value_from_plural_key(hash, key); end

  # source://jekyll-4.2.2/lib/jekyll/utils.rb:81
  def value_from_singular_key(hash, key); end

  private

  # source://jekyll-4.2.2/lib/jekyll/utils.rb:335
  def duplicate_frozen_values(target); end

  # source://jekyll-4.2.2/lib/jekyll/utils.rb:329
  def merge_default_proc(target, overwrite); end

  # source://jekyll-4.2.2/lib/jekyll/utils.rb:317
  def merge_values(target, overwrite); end

  # Replace each character sequence with a hyphen.
  #
  # See Utils#slugify for a description of the character sequence specified
  # by each mode.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils.rb:345
  def replace_character_sequence_with_hyphen(string, mode: T.unsafe(nil)); end
end

# source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:5
module Jekyll::Utils::Ansi
  extend ::Jekyll::Utils::Ansi

  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:51
  def black(str); end

  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:51
  def blue(str); end

  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:51
  def cyan(str); end

  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:51
  def green(str); end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:31
  def has?(str); end

  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:51
  def magenta(str); end

  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:51
  def red(str); end

  # Reset the color back to the default color so that you do not leak any
  # colors when you move onto the next line. This is probably normally
  # used as part of a wrapper so that we don't leak colors.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:39
  def reset(str = T.unsafe(nil)); end

  # Strip ANSI from the current string.  It also strips cursor stuff,
  # well some of it, and it also strips some other stuff that a lot of
  # the other ANSI strippers don't.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:25
  def strip(str); end

  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:51
  def white(str); end

  # source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:51
  def yellow(str); end
end

# source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:10
Jekyll::Utils::Ansi::COLORS = T.let(T.unsafe(nil), Hash)

# source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:8
Jekyll::Utils::Ansi::ESCAPE = T.let(T.unsafe(nil), String)

# source://jekyll-4.2.2/lib/jekyll/utils/ansi.rb:9
Jekyll::Utils::Ansi::MATCH = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/utils/exec.rb:7
module Jekyll::Utils::Exec
  extend ::Jekyll::Utils::Exec

  # Runs a program in a sub-shell.
  #
  # *args - a list of strings containing the program name and arguments
  #
  # Returns a Process::Status and a String of output in an array in
  # that order.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/exec.rb:16
  def run(*args); end
end

# source://jekyll-4.2.2/lib/jekyll/utils/internet.rb:5
module Jekyll::Utils::Internet
  private

  # source://jekyll-4.2.2/lib/jekyll/utils/internet.rb:23
  def connected?; end

  # source://jekyll-4.2.2/lib/jekyll/utils/internet.rb:27
  def dns(domain); end

  class << self
    # @return [Boolean]
    #
    # source://jekyll-4.2.2/lib/jekyll/utils/internet.rb:23
    def connected?; end

    # source://jekyll-4.2.2/lib/jekyll/utils/internet.rb:27
    def dns(domain); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:5
module Jekyll::Utils::Platforms
  extend ::Jekyll::Utils::Platforms

  # Determine if Windows Subsystem for Linux (WSL)
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:27
  def bash_on_windows?; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:8
  def jruby?; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:31
  def linux?; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:12
  def mri?; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:35
  def osx?; end

  # Not a Windows Subsystem for Linux (WSL)
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:21
  def really_windows?; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:39
  def unix?; end

  # Not a Windows Subsystem for Linux (WSL)
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:21
  def vanilla_windows?; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:16
  def windows?; end

  private

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:58
  def linux_os?; end

  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:62
  def microsoft_proc_version?; end

  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:45
  def proc_version; end

  # source://jekyll-4.2.2/lib/jekyll/utils/platforms.rb:54
  def rbconfig_host; end
end

# source://jekyll-4.2.2/lib/jekyll/utils.rb:18
Jekyll::Utils::SLUGIFY_ASCII_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/utils.rb:16
Jekyll::Utils::SLUGIFY_DEFAULT_REGEXP = T.let(T.unsafe(nil), Regexp)

# Constants for use in #slugify
#
# source://jekyll-4.2.2/lib/jekyll/utils.rb:14
Jekyll::Utils::SLUGIFY_MODES = T.let(T.unsafe(nil), Array)

# source://jekyll-4.2.2/lib/jekyll/utils.rb:17
Jekyll::Utils::SLUGIFY_PRETTY_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://jekyll-4.2.2/lib/jekyll/utils.rb:15
Jekyll::Utils::SLUGIFY_RAW_REGEXP = T.let(T.unsafe(nil), Regexp)

# Based on the pattern and code from
# https://emptysqua.re/blog/an-event-synchronization-primitive-for-ruby/
#
# source://jekyll-4.2.2/lib/jekyll/utils/thread_event.rb:7
class Jekyll::Utils::ThreadEvent
  # @return [ThreadEvent] a new instance of ThreadEvent
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/thread_event.rb:10
  def initialize; end

  # Returns the value of attribute flag.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/thread_event.rb:8
  def flag; end

  # source://jekyll-4.2.2/lib/jekyll/utils/thread_event.rb:16
  def set; end

  # source://jekyll-4.2.2/lib/jekyll/utils/thread_event.rb:24
  def wait; end
end

# source://jekyll-4.2.2/lib/jekyll/utils/win_tz.rb:5
module Jekyll::Utils::WinTZ
  extend ::Jekyll::Utils::WinTZ

  # Public: Calculate the Timezone for Windows when the config file has a defined
  #         'timezone' key.
  #
  # timezone - the IANA Time Zone specified in "_config.yml"
  #
  # Returns a string that ultimately re-defines ENV["TZ"] in Windows
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/win_tz.rb:14
  def calculate(timezone); end

  private

  # Private: Convert given seconds to an hour as an absolute number.
  #
  # seconds - supplied as an integer, it is converted to its absolute.
  # 3600 - no. of seconds in an hour.
  #
  # Returns an integer.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/win_tz.rb:60
  def absolute_hour(seconds); end

  # Private: Perform a modulo operation on a given fraction.
  #
  # fraction - supplied as a rational number, its numerator is divided
  #            by its denominator and the remainder returned.
  #
  # Returns an integer.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/win_tz.rb:70
  def modulo_of(fraction); end

  # Private: Convert given seconds to an hour as a rational number.
  #
  # seconds - supplied as an integer, it is converted to a rational number.
  # 3600 - no. of seconds in an hour.
  #
  # Returns a rational number.
  #
  # source://jekyll-4.2.2/lib/jekyll/utils/win_tz.rb:50
  def rational_hour(seconds); end
end

# source://jekyll-4.2.2/lib/jekyll/version.rb:4
Jekyll::VERSION = T.let(T.unsafe(nil), String)

# source://jekyll-4.2.2/lib/jekyll/converters/smartypants.rb:3
module Kramdown
  class << self
    # source://kramdown-2.4.0/lib/kramdown/document.rb:49
    def data_dir; end
  end
end

# A Kramdown::Document subclass meant to optimize memory usage from initializing
# a kramdown document for parsing.
#
# The optimization is by using the same options Hash (and its derivatives) for
# converting all Markdown documents in a Jekyll site.
#
# source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:9
class Kramdown::JekyllDocument < ::Kramdown::Document
  # @return [JekyllDocument] a new instance of JekyllDocument
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:50
  def initialize(source, options = T.unsafe(nil)); end

  # Use Kramdown::Converter::Html class to convert this document into HTML.
  #
  # The implementation is basically an optimized version of core logic in
  # +Kramdown::Document#method_missing+ from kramdown-2.1.0.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:61
  def to_html; end

  class << self
    # Returns the value of attribute options.
    #
    # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:11
    def options; end

    # Returns the value of attribute parser.
    #
    # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:11
    def parser; end

    # The implementation is basically the core logic in +Kramdown::Document#initialize+
    #
    #
    # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:16
    def setup(options); end

    private

    # source://jekyll-4.2.2/lib/jekyll/converters/markdown/kramdown_parser.rb:43
    def try_require(type, name); end
  end
end

# source://jekyll-4.2.2/lib/jekyll/converters/smartypants.rb:4
module Kramdown::Parser; end

# source://jekyll-4.2.2/lib/jekyll/converters/smartypants.rb:5
class Kramdown::Parser::SmartyPants < ::Kramdown::Parser::Kramdown
  # @return [SmartyPants] a new instance of SmartyPants
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/smartypants.rb:6
  def initialize(source, options); end

  # source://jekyll-4.2.2/lib/jekyll/converters/smartypants.rb:12
  def parse_content; end
end

# source://kramdown-2.4.0/lib/kramdown/version.rb:13
Kramdown::VERSION = T.let(T.unsafe(nil), String)
