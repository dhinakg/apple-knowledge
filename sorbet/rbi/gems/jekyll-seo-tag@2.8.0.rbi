# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jekyll-seo-tag` gem.
# Please instead update this file by running `bin/tapioca gem jekyll-seo-tag`.

# Public: Methods that generate a URL for a resource such as a Post or a Page.
#
# Examples
#
#   URL.new({
#     :template => /:categories/:title.html",
#     :placeholders => {:categories => "ruby", :title => "something"}
#   }).to_s
#
# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/version.rb:6
module Jekyll
  class << self
    # Public: Generate a Jekyll configuration Hash by merging the default
    # options with anything in _config.yml, and adding the given options on top.
    #
    # override - A Hash of config directives that override any options in both
    #            the defaults and the config file.
    #            See Jekyll::Configuration::DEFAULTS for a
    #            list of option names and their defaults.
    #
    # Returns the final configuration Hash.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:114
    def configuration(override = T.unsafe(nil)); end

    # Public: Tells you which Jekyll environment you are building in so you can skip tasks
    # if you need to.  This is useful when doing expensive compression tasks on css and
    # images and allows you to skip that when working in development.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:101
    def env; end

    # Public: Fetch the logger instance for this Jekyll process.
    #
    # Returns the LogAdapter instance.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:145
    def logger; end

    # Public: Set the log writer.
    #         New log writer must respond to the same methods
    #         as Ruby's interal Logger.
    #
    # writer - the new Logger-compatible log transport
    #
    # Returns the new logger.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:156
    def logger=(writer); end

    # Public: Ensures the questionable path is prefixed with the base directory
    #         and prepends the questionable path with the base directory if false.
    #
    # base_directory - the directory with which to prefix the questionable path
    # questionable_path - the path we're unsure about, and want prefixed
    #
    # Returns the sanitized path.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:174
    def sanitized_path(base_directory, questionable_path); end

    # Public: Set the TZ environment variable to use the timezone specified
    #
    # timezone - the IANA Time Zone
    #
    # Returns nothing
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:133
    def set_timezone(timezone); end

    # Public: An array of sites
    #
    # Returns the Jekyll sites created.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:163
    def sites; end
  end
end

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/version.rb:7
class Jekyll::SeoTag < ::Liquid::Tag
  # @return [SeoTag] a new instance of SeoTag
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:29
  def initialize(_tag_name, text, _tokens); end

  # Returns the value of attribute context.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:16
  def context; end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:16
  def context=(_arg0); end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:34
  def render(context); end

  private

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:57
  def drop; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:65
  def info; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:41
  def options; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:48
  def payload; end

  class << self
    # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:73
    def template; end

    private

    # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:79
    def template_contents; end

    # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:85
    def template_path; end
  end
end

# A drop representing the current page's author
#
# Author name will be pulled from:
#
# 1. The page's `author` key
# 2. The first author in the page's `authors` key
# 3. The `author` key in the site config
#
# If the result from the name search is a string, we'll also check
# for additional author metadata in `site.data.authors`
#
# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:19
class Jekyll::SeoTag::AuthorDrop < ::Jekyll::Drops::Drop
  # Initialize a new AuthorDrop
  #
  # page - The page hash (e.g., Page#to_liquid)
  # site - The Jekyll::Drops::SiteDrop
  #
  # @raise [ArgumentError]
  # @return [AuthorDrop] a new instance of AuthorDrop
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:20
  def initialize(page: T.unsafe(nil), site: T.unsafe(nil)); end

  # AuthorDrop#to_s should return name, allowing the author drop to safely
  # replace `page.author`, if necessary, and remain backwards compatible
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:30
  def name; end

  # AuthorDrop#to_s should return name, allowing the author drop to safely
  # replace `page.author`, if necessary, and remain backwards compatible
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:30
  def to_s; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:35
  def twitter; end

  private

  # Returns the normalized author hash representing the page author,
  # including site-wide metadata if the author is provided as a string,
  # or an empty hash, if the author cannot be resolved
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:75
  def author_hash; end

  # Returns the normalized author hash representing the page author,
  # including site-wide metadata if the author is provided as a string,
  # or an empty hash, if the author cannot be resolved
  # Since author_hash is aliased to fallback_data, any values in the hash
  # will be exposed via the drop, allowing support for arbitrary metadata
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:75
  def fallback_data; end

  # Returns the value of attribute page.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:44
  def page; end

  # Finds the page author in the page.author, page.authors, or site.author
  #
  # Returns a string or hash representing the author
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:49
  def resolved_author; end

  # Returns the value of attribute site.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:44
  def site; end

  # If resolved_author is a string, attempts to find coresponding author
  # metadata in `site.data.authors`
  #
  # Returns a hash representing additional metadata or an empty hash
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/author_drop.rb:62
  def site_data_hash; end
end

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:5
class Jekyll::SeoTag::Drop < ::Jekyll::Drops::Drop
  include ::Jekyll::SeoTag::UrlHelper

  # @return [Drop] a new instance of Drop
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:17
  def initialize(text, context); end

  # A drop representing the page author
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:97
  def author; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:168
  def canonical_url; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:113
  def date_modified; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:120
  def date_published; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:90
  def description; end

  # Returns a Drop representing the page's image
  # Returns nil if the image has no path, to preserve backwards compatability
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:108
  def image; end

  # A drop representing the JSON-LD output
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:102
  def json_ld; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:138
  def links; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:148
  def logo; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:76
  def name; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:160
  def page_lang; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:164
  def page_locale; end

  # Page title without site title or description appended
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:49
  def page_title; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:44
  def site_description; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:40
  def site_tagline; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:53
  def site_tagline_or_description; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:36
  def site_title; end

  # Page title with site title or description appended
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:59
  def title; end

  # Should the `<title>` tag be generated for this page?
  #
  # @return [Boolean]
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:29
  def title?; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:124
  def type; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:24
  def version; end

  private

  # Returns the value of attribute context.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:206
  def context; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:208
  def fallback_data; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:180
  def filters; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:212
  def format_string(string); end

  # @return [Boolean]
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:192
  def homepage_or_about?; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:184
  def page; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:196
  def page_number; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:224
  def page_seo; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:220
  def seo_name; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:188
  def site; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:228
  def site_social; end

  # Safely returns a sub hash
  #
  # hash - the parent hash
  # key  - the key in the parent hash
  #
  # Returns the sub hash or an empty hash, if it does not exist
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:238
  def sub_hash(hash, key); end
end

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:14
Jekyll::SeoTag::Drop::EMPTY_READ_ONLY_HASH = T.let(T.unsafe(nil), Hash)

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:9
Jekyll::SeoTag::Drop::FORMAT_STRING_METHODS = T.let(T.unsafe(nil), Array)

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:12
Jekyll::SeoTag::Drop::HOMEPAGE_OR_ABOUT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/drop.rb:8
Jekyll::SeoTag::Drop::TITLE_SEPARATOR = T.let(T.unsafe(nil), String)

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/filters.rb:5
class Jekyll::SeoTag::Filters
  include ::Jekyll::Filters::URLFilters
  include ::Jekyll::Filters::GroupingFilters
  include ::Jekyll::Filters::DateFilters
  include ::Jekyll::Filters
  include ::Liquid::StandardFilters

  # @return [Filters] a new instance of Filters
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/filters.rb:9
  def initialize(context); end
end

# A drop representing the page image
# The image path will be pulled from:
#
# 1. The `image` key if it's a string
# 2. The `image.path` key if it's a hash
# 3. The `image.facebook` key
# 4. The `image.twitter` key
#
# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:12
class Jekyll::SeoTag::ImageDrop < ::Jekyll::Drops::Drop
  include ::Jekyll::SeoTag::UrlHelper

  # Initialize a new ImageDrop
  #
  # page - The page hash (e.g., Page#to_liquid)
  # context - the Liquid::Context
  #
  # @raise [ArgumentError]
  # @return [ImageDrop] a new instance of ImageDrop
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:19
  def initialize(page: T.unsafe(nil), context: T.unsafe(nil)); end

  # Called path for backwards compatability, this is really
  # the escaped, absolute URL representing the page's image
  # Returns nil if no image path can be determined
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:30
  def path; end

  # Called path for backwards compatability, this is really
  # the escaped, absolute URL representing the page's image
  # Returns nil if no image path can be determined
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:30
  def to_s; end

  private

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:62
  def absolute_url; end

  # Returns the value of attribute context.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:37
  def context; end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:37
  def context=(_arg0); end

  # The normalized image hash with a `path` key (which may be nil)
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:40
  def fallback_data; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:73
  def filters; end

  # The normalized image hash with a `path` key (which may be nil)
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:40
  def image_hash; end

  # Returns the value of attribute page.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:37
  def page; end

  # Sets the attribute page
  #
  # @param value the value to set the attribute page to.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:37
  def page=(_arg0); end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/image_drop.rb:56
  def raw_path; end
end

# This module is deprecated, but is included in the Gem to avoid a breaking
# change and should be removed at the next major version bump
#
# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld.rb:7
module Jekyll::SeoTag::JSONLD
  # Self should be a Jekyll::SeoTag::Drop instance (when extending the module)
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld.rb:25
  def json_ld; end
end

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld.rb:8
Jekyll::SeoTag::JSONLD::METHODS_KEYS = T.let(T.unsafe(nil), Hash)

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:5
class Jekyll::SeoTag::JSONLDDrop < ::Jekyll::Drops::Drop
  extend ::Forwardable

  # page_drop should be an instance of Jekyll::SeoTag::Drop
  #
  # @return [JSONLDDrop] a new instance of JSONLDDrop
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:27
  def initialize(page_drop); end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:38
  def author; end

  # source://RUBY_ROOT/forwardable.rb:229
  def dateModified(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def datePublished(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def description(*args, **_arg1, &block); end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:32
  def fallback_data; end

  # source://RUBY_ROOT/forwardable.rb:229
  def headline(*args, **_arg1, &block); end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:55
  def image; end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:79
  def mainEntityOfPage; end

  # source://RUBY_ROOT/forwardable.rb:229
  def name(*args, **_arg1, &block); end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:65
  def publisher; end

  # source://RUBY_ROOT/forwardable.rb:229
  def sameAs(*args, **_arg1, &block); end

  # Returns a JSON-encoded object containing the JSON-LD data.
  # Keys are sorted.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:92
  def to_json(state = T.unsafe(nil)); end

  # source://RUBY_ROOT/forwardable.rb:229
  def url(*args, **_arg1, &block); end

  private

  # source://RUBY_ROOT/forwardable.rb:229
  def logo(*args, **_arg1, &block); end

  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:79
  def main_entity; end

  # Returns the value of attribute page_drop.
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:101
  def page_drop; end

  # source://RUBY_ROOT/forwardable.rb:229
  def type(*args, **_arg1, &block); end
end

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:23
Jekyll::SeoTag::JSONLDDrop::VALID_AUTHOR_TYPES = T.let(T.unsafe(nil), Array)

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/json_ld_drop.rb:22
Jekyll::SeoTag::JSONLDDrop::VALID_ENTITY_TYPES = T.let(T.unsafe(nil), Array)

# Matches all whitespace that follows either
#   1. A '}', which closes a Liquid tag
#   2. A '{', which opens a JSON block
#   3. A '>' followed by a newline, which closes an XML tag or
#   4. A ',' followed by a newline, which ends a JSON line
# We will strip all of this whitespace to minify the template
# We will not strip any whitespace if the next character is a '-'
#   so that we do not interfere with the HTML comment at the
#   very begining
#
# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag.rb:27
Jekyll::SeoTag::MINIFY_REGEX = T.let(T.unsafe(nil), Regexp)

# Mixin to share common URL-related methods between class
#
# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/url_helper.rb:6
module Jekyll::SeoTag::UrlHelper
  private

  # Determines if the given string is an absolute URL
  #
  # Returns true if an absolute URL
  # Returns false if it's a relative URL
  # Returns nil if it is not a string or can't be parsed as a URL
  #
  # @return [Boolean]
  #
  # source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/url_helper.rb:14
  def absolute_url?(string); end
end

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/version.rb:8
Jekyll::SeoTag::VERSION = T.let(T.unsafe(nil), String)

# source://jekyll-4.2.2/lib/jekyll/version.rb:4
Jekyll::VERSION = T.let(T.unsafe(nil), String)

# Prevent bundler errors
#
# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/version.rb:4
module Liquid
  class << self
    # source://liquid-4.0.3/lib/liquid.rb:43
    def cache_classes; end

    # source://liquid-4.0.3/lib/liquid.rb:43
    def cache_classes=(_arg0); end
  end
end

# source://liquid-4.0.3/lib/liquid.rb:38
Liquid::AnyStartingTag = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:24
Liquid::ArgumentSeparator = T.let(T.unsafe(nil), String)

# source://liquid-4.0.3/lib/liquid.rb:25
Liquid::FilterArgumentSeparator = T.let(T.unsafe(nil), String)

# source://liquid-4.0.3/lib/liquid.rb:23
Liquid::FilterSeparator = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:39
Liquid::PartialTemplateParser = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:36
Liquid::QuotedFragment = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:35
Liquid::QuotedString = T.let(T.unsafe(nil), Regexp)

# source://jekyll-seo-tag-2.8.0/lib/jekyll-seo-tag/version.rb:4
class Liquid::Tag
  # source://liquid-4.0.3/lib/liquid/tag.rb:17
  def initialize(tag_name, markup, parse_context); end

  # source://liquid-4.0.3/lib/liquid/tag.rb:39
  def blank?; end

  # source://liquid-4.0.3/lib/liquid/tag.rb:3
  def line_number; end

  # source://liquid-4.0.3/lib/liquid/tag.rb:31
  def name; end

  # source://liquid-4.0.3/lib/liquid/tag.rb:3
  def nodelist; end

  # source://liquid-4.0.3/lib/liquid/tag.rb:3
  def options; end

  # source://liquid-4.0.3/lib/liquid/tag.rb:24
  def parse(_tokens); end

  # source://liquid-4.0.3/lib/liquid/tag.rb:3
  def parse_context; end

  # source://liquid-4.0.3/lib/liquid/tag.rb:27
  def raw; end

  # source://liquid-4.0.3/lib/liquid/tag.rb:35
  def render(_context); end

  # source://liquid-4.0.3/lib/liquid/tag.rb:3
  def tag_name; end

  class << self
    # source://liquid-4.0.3/lib/liquid/tag.rb:8
    def parse(tag_name, markup, tokenizer, options); end
  end
end

# source://liquid-4.0.3/lib/liquid.rb:37
Liquid::TagAttributes = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:29
Liquid::TagEnd = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:28
Liquid::TagStart = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:40
Liquid::TemplateParser = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid/version.rb:4
Liquid::VERSION = T.let(T.unsafe(nil), String)

# source://liquid-4.0.3/lib/liquid.rb:26
Liquid::VariableAttributeSeparator = T.let(T.unsafe(nil), String)

# source://liquid-4.0.3/lib/liquid.rb:33
Liquid::VariableEnd = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:34
Liquid::VariableIncompleteEnd = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:41
Liquid::VariableParser = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:31
Liquid::VariableSegment = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:30
Liquid::VariableSignature = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:32
Liquid::VariableStart = T.let(T.unsafe(nil), Regexp)

# source://liquid-4.0.3/lib/liquid.rb:27
Liquid::WhitespaceControl = T.let(T.unsafe(nil), String)
