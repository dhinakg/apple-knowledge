# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `safe_yaml` gem.
# Please instead update this file by running `bin/tapioca gem safe_yaml`.

# This needs to be defined up front in case any internal classes need to base
# their behavior off of this.
#
# source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:6
module SafeYAML
  private

  # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:62
  def restore_defaults!; end

  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:104
  def tag_is_explicitly_trusted?(tag); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:66
  def tag_safety_check!(tag, options); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:73
  def whitelist!(*classes); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:79
  def whitelist_class!(klass); end

  class << self
    # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:134
    def load(yaml, filename = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:155
    def load_file(filename, options = T.unsafe(nil)); end

    # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:62
    def restore_defaults!; end

    # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:104
    def tag_is_explicitly_trusted?(tag); end

    # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:66
    def tag_safety_check!(tag, options); end

    # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:73
    def whitelist!(*classes); end

    # source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:79
    def whitelist_class!(klass); end
  end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:29
SafeYAML::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://safe_yaml-1.0.5/lib/safe_yaml/deep.rb:2
class SafeYAML::Deep
  class << self
    # source://safe_yaml-1.0.5/lib/safe_yaml/deep.rb:17
    def copy(object); end

    # source://safe_yaml-1.0.5/lib/safe_yaml/deep.rb:3
    def freeze(object); end
  end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/libyaml_checker.rb:4
class SafeYAML::LibyamlChecker
  class << self
    # @return [Boolean]
    #
    # source://safe_yaml-1.0.5/lib/safe_yaml/libyaml_checker.rb:29
    def libyaml_patched?; end

    # @return [Boolean]
    #
    # source://safe_yaml-1.0.5/lib/safe_yaml/libyaml_checker.rb:23
    def libyaml_version_ok?; end
  end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/libyaml_checker.rb:10
SafeYAML::LibyamlChecker::KNOWN_PATCHED_LIBYAML_VERSIONS = T.let(T.unsafe(nil), Set)

# source://safe_yaml-1.0.5/lib/safe_yaml/libyaml_checker.rb:5
SafeYAML::LibyamlChecker::LIBYAML_VERSION = T.let(T.unsafe(nil), String)

# Do proper version comparison (e.g. so 0.1.10 is >= 0.1.6)
#
# source://safe_yaml-1.0.5/lib/safe_yaml/libyaml_checker.rb:8
SafeYAML::LibyamlChecker::SAFE_LIBYAML_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:27
SafeYAML::MULTI_ARGUMENT_YAML_LOAD = T.let(T.unsafe(nil), TrueClass)

# source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:38
SafeYAML::OPTIONS = T.let(T.unsafe(nil), Hash)

# source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:40
SafeYAML::PREDEFINED_TAGS = T.let(T.unsafe(nil), Hash)

# source://safe_yaml-1.0.5/lib/safe_yaml/parse/hexadecimal.rb:2
class SafeYAML::Parse; end

# source://safe_yaml-1.0.5/lib/safe_yaml/parse/date.rb:5
class SafeYAML::Parse::Date
  class << self
    # source://safe_yaml-1.0.5/lib/safe_yaml/parse/date.rb:26
    def value(value); end
  end
end

# This one's easy enough :)
#
# source://safe_yaml-1.0.5/lib/safe_yaml/parse/date.rb:7
SafeYAML::Parse::Date::DATE_MATCHER = T.let(T.unsafe(nil), Regexp)

# source://safe_yaml-1.0.5/lib/safe_yaml/parse/date.rb:15
SafeYAML::Parse::Date::MICROSECONDS_PER_SECOND = T.let(T.unsafe(nil), Integer)

# source://safe_yaml-1.0.5/lib/safe_yaml/parse/date.rb:14
SafeYAML::Parse::Date::SECONDS_PER_DAY = T.let(T.unsafe(nil), Integer)

# So this is weird. In Ruby 1.8.7, the DateTime#sec_fraction method returned fractional
# seconds in units of DAYS for some reason. In 1.9.2, they changed the units -- much more
# reasonably -- to seconds.
#
# source://safe_yaml-1.0.5/lib/safe_yaml/parse/date.rb:20
SafeYAML::Parse::Date::SEC_FRACTION_MULTIPLIER = T.let(T.unsafe(nil), Integer)

# This unbelievable little gem is taken basically straight from the YAML spec, but made
# slightly more readable (to my poor eyes at least) to me:
# http://yaml.org/type/timestamp.html
#
# source://safe_yaml-1.0.5/lib/safe_yaml/parse/date.rb:12
SafeYAML::Parse::Date::TIME_MATCHER = T.let(T.unsafe(nil), Regexp)

# The DateTime class has a #to_time method in Ruby 1.9+;
# Before that we'll just need to convert DateTime to Time ourselves.
#
# source://safe_yaml-1.0.5/lib/safe_yaml/parse/date.rb:24
SafeYAML::Parse::Date::TO_TIME_AVAILABLE = T.let(T.unsafe(nil), TrueClass)

# source://safe_yaml-1.0.5/lib/safe_yaml/parse/hexadecimal.rb:3
class SafeYAML::Parse::Hexadecimal
  class << self
    # source://safe_yaml-1.0.5/lib/safe_yaml/parse/hexadecimal.rb:6
    def value(value); end
  end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/parse/hexadecimal.rb:4
SafeYAML::Parse::Hexadecimal::MATCHER = T.let(T.unsafe(nil), Regexp)

# source://safe_yaml-1.0.5/lib/safe_yaml/parse/sexagesimal.rb:3
class SafeYAML::Parse::Sexagesimal
  class << self
    # source://safe_yaml-1.0.5/lib/safe_yaml/parse/sexagesimal.rb:7
    def value(value); end
  end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/parse/sexagesimal.rb:5
SafeYAML::Parse::Sexagesimal::FLOAT_MATCHER = T.let(T.unsafe(nil), Regexp)

# source://safe_yaml-1.0.5/lib/safe_yaml/parse/sexagesimal.rb:4
SafeYAML::Parse::Sexagesimal::INTEGER_MATCHER = T.let(T.unsafe(nil), Regexp)

# source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:5
class SafeYAML::PsychHandler < ::Psych::Handler
  # @return [PsychHandler] a new instance of PsychHandler
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:6
  def initialize(options, &block); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:21
  def add_to_current_structure(value, anchor = T.unsafe(nil), quoted = T.unsafe(nil), tag = T.unsafe(nil)); end

  # event handlers
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:65
  def alias(anchor); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:55
  def end_current_structure; end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:73
  def end_document(implicit); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:84
  def end_mapping; end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:95
  def end_sequence; end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:17
  def result; end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:69
  def scalar(value, anchor, tag, plain, quoted, style); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:77
  def start_mapping(anchor, tag, implicit, style); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:88
  def start_sequence(anchor, tag, implicit, style); end

  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_handler.rb:60
  def streaming?; end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/psych_resolver.rb:2
class SafeYAML::PsychResolver < ::SafeYAML::Resolver
  # @return [PsychResolver] a new instance of PsychResolver
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_resolver.rb:11
  def initialize(options = T.unsafe(nil)); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_resolver.rb:33
  def get_node_tag(node); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_resolver.rb:29
  def get_node_type(node); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_resolver.rb:37
  def get_node_value(node); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_resolver.rb:24
  def native_resolve(node); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_resolver.rb:20
  def resolve_alias(node); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_resolver.rb:16
  def resolve_root(root); end

  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/psych_resolver.rb:48
  def value_is_quoted?(node); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/psych_resolver.rb:3
SafeYAML::PsychResolver::NODE_TYPES = T.let(T.unsafe(nil), Hash)

# source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:2
class SafeYAML::Resolver
  # @return [Resolver] a new instance of Resolver
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:3
  def initialize(options); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:62
  def get_and_check_node_tag(node); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:72
  def options; end

  # source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:30
  def resolve_map(node); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:10
  def resolve_node(node); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:58
  def resolve_scalar(node); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:49
  def resolve_seq(node); end

  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:68
  def tag_is_whitelisted?(tag); end

  private

  # source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:88
  def merge_into_hash(hash, array); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/resolver.rb:77
  def normalize_map(map); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/safe_to_ruby_visitor.rb:2
class SafeYAML::SafeToRubyVisitor < ::Psych::Visitors::ToRuby
  # @return [SafeToRubyVisitor] a new instance of SafeToRubyVisitor
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/safe_to_ruby_visitor.rb:5
  def initialize(resolver); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/safe_to_ruby_visitor.rb:20
  def accept(node); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/safe_to_ruby_visitor.rb:3
SafeYAML::SafeToRubyVisitor::INITIALIZE_ARITY = T.let(T.unsafe(nil), Integer)

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:2
class SafeYAML::Transform
  class << self
    # source://safe_yaml-1.0.5/lib/safe_yaml/transform.rb:14
    def to_guessed_type(value, quoted = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://safe_yaml-1.0.5/lib/safe_yaml/transform.rb:30
    def to_proper_type(value, quoted = T.unsafe(nil), tag = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/transform.rb:5
SafeYAML::Transform::TRANSFORMERS = T.let(T.unsafe(nil), Array)

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_boolean.rb:3
class SafeYAML::Transform::ToBoolean
  include ::SafeYAML::Transform::TransformationMap
  extend ::SafeYAML::Transform::TransformationMap::ClassMethods

  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_boolean.rb:15
  def transform?(value); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:42
SafeYAML::Transform::ToBoolean::PREDEFINED_VALUES = T.let(T.unsafe(nil), SafeYAML::Transform::TransformationMap::CaseAgnosticMap)

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_date.rb:3
class SafeYAML::Transform::ToDate
  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_date.rb:4
  def transform?(value); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_float.rb:3
class SafeYAML::Transform::ToFloat
  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_float.rb:21
  def transform?(value); end

  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_float.rb:26
  def try_edge_cases?(value); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_float.rb:4
SafeYAML::Transform::ToFloat::Infinity = T.let(T.unsafe(nil), Float)

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_float.rb:19
SafeYAML::Transform::ToFloat::MATCHER = T.let(T.unsafe(nil), Regexp)

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_float.rb:5
SafeYAML::Transform::ToFloat::NaN = T.let(T.unsafe(nil), Float)

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_float.rb:7
SafeYAML::Transform::ToFloat::PREDEFINED_VALUES = T.let(T.unsafe(nil), Hash)

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_integer.rb:3
class SafeYAML::Transform::ToInteger
  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_integer.rb:11
  def transform?(value); end

  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_integer.rb:19
  def try_edge_cases?(value); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_integer.rb:4
SafeYAML::Transform::ToInteger::MATCHERS = T.let(T.unsafe(nil), Array)

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_nil.rb:3
class SafeYAML::Transform::ToNil
  include ::SafeYAML::Transform::TransformationMap
  extend ::SafeYAML::Transform::TransformationMap::ClassMethods

  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_nil.rb:12
  def transform?(value); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:42
SafeYAML::Transform::ToNil::PREDEFINED_VALUES = T.let(T.unsafe(nil), SafeYAML::Transform::TransformationMap::CaseAgnosticMap)

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_symbol.rb:3
class SafeYAML::Transform::ToSymbol
  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/to_symbol.rb:4
  def transform?(value, options = T.unsafe(nil)); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:3
module SafeYAML::Transform::TransformationMap
  mixes_in_class_methods ::SafeYAML::Transform::TransformationMap::ClassMethods

  class << self
    # @private
    #
    # source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:4
    def included(base); end
  end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:8
class SafeYAML::Transform::TransformationMap::CaseAgnosticMap < ::Hash
  # @return [CaseAgnosticMap] a new instance of CaseAgnosticMap
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:9
  def initialize(*args); end

  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:17
  def [](key); end

  # OK, I actually don't think it's all that important that this map be
  # frozen.
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:23
  def freeze; end

  # @return [Boolean]
  #
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:13
  def include?(key); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:28
module SafeYAML::Transform::TransformationMap::ClassMethods
  # source://safe_yaml-1.0.5/lib/safe_yaml/transform/transformation_map.rb:29
  def set_predefined_values(predefined_values); end
end

# source://safe_yaml-1.0.5/lib/safe_yaml/load.rb:7
SafeYAML::YAML_ENGINE = T.let(T.unsafe(nil), String)
