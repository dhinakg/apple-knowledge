# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jekyll-gist` gem.
# Please instead update this file by running `bin/tapioca gem jekyll-gist`.

# Public: Methods that generate a URL for a resource such as a Post or a Page.
#
# Examples
#
#   URL.new({
#     :template => /:categories/:title.html",
#     :placeholders => {:categories => "ruby", :title => "something"}
#   }).to_s
#
# source://jekyll-gist-1.5.0/lib/jekyll-gist/version.rb:3
module Jekyll
  class << self
    # Public: Generate a Jekyll configuration Hash by merging the default
    # options with anything in _config.yml, and adding the given options on top.
    #
    # override - A Hash of config directives that override any options in both
    #            the defaults and the config file.
    #            See Jekyll::Configuration::DEFAULTS for a
    #            list of option names and their defaults.
    #
    # Returns the final configuration Hash.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:114
    def configuration(override = T.unsafe(nil)); end

    # Public: Tells you which Jekyll environment you are building in so you can skip tasks
    # if you need to.  This is useful when doing expensive compression tasks on css and
    # images and allows you to skip that when working in development.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:101
    def env; end

    # Public: Fetch the logger instance for this Jekyll process.
    #
    # Returns the LogAdapter instance.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:145
    def logger; end

    # Public: Set the log writer.
    #         New log writer must respond to the same methods
    #         as Ruby's interal Logger.
    #
    # writer - the new Logger-compatible log transport
    #
    # Returns the new logger.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:156
    def logger=(writer); end

    # Public: Ensures the questionable path is prefixed with the base directory
    #         and prepends the questionable path with the base directory if false.
    #
    # base_directory - the directory with which to prefix the questionable path
    # questionable_path - the path we're unsure about, and want prefixed
    #
    # Returns the sanitized path.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:174
    def sanitized_path(base_directory, questionable_path); end

    # Public: Set the TZ environment variable to use the timezone specified
    #
    # timezone - the IANA Time Zone
    #
    # Returns nothing
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:133
    def set_timezone(timezone); end

    # Public: An array of sites
    #
    # Returns the Jekyll sites created.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:163
    def sites; end
  end
end

# source://jekyll-gist-1.5.0/lib/jekyll-gist/version.rb:4
module Jekyll::Gist; end

# source://jekyll-gist-1.5.0/lib/jekyll-gist/gist_tag.rb:12
class Jekyll::Gist::GistTag < ::Liquid::Tag
  # source://jekyll-gist-1.5.0/lib/jekyll-gist/gist_tag.rb:13
  def render(context); end

  private

  # source://jekyll-gist-1.5.0/lib/jekyll-gist/gist_tag.rb:104
  def code_from_api(gist_id, filename = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://jekyll-gist-1.5.0/lib/jekyll-gist/gist_tag.rb:52
  def context_contains_key?(context, key); end

  # source://jekyll-gist-1.5.0/lib/jekyll-gist/gist_tag.rb:45
  def determine_arguments(input); end

  # source://jekyll-gist-1.5.0/lib/jekyll-gist/gist_tag.rb:85
  def fetch_raw_code(gist_id, filename = T.unsafe(nil)); end

  # source://jekyll-gist-1.5.0/lib/jekyll-gist/gist_tag.rb:66
  def gist_noscript_tag(gist_id, filename = T.unsafe(nil)); end

  # source://jekyll-gist-1.5.0/lib/jekyll-gist/gist_tag.rb:60
  def gist_script_tag(gist_id, filename = T.unsafe(nil)); end

  class << self
    # source://jekyll-gist-1.5.0/lib/jekyll-gist/gist_tag.rb:121
    def client; end
  end
end

# source://jekyll-gist-1.5.0/lib/jekyll-gist/version.rb:5
Jekyll::Gist::VERSION = T.let(T.unsafe(nil), String)

# source://jekyll-4.2.2/lib/jekyll/version.rb:4
Jekyll::VERSION = T.let(T.unsafe(nil), String)
