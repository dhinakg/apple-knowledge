# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jekyll-commonmark` gem.
# Please instead update this file by running `bin/tapioca gem jekyll-commonmark`.

# Public: Methods that generate a URL for a resource such as a Post or a Page.
#
# Examples
#
#   URL.new({
#     :template => /:categories/:title.html",
#     :placeholders => {:categories => "ruby", :title => "something"}
#   }).to_s
#
# source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark.rb:3
module Jekyll
  class << self
    # Public: Generate a Jekyll configuration Hash by merging the default
    # options with anything in _config.yml, and adding the given options on top.
    #
    # override - A Hash of config directives that override any options in both
    #            the defaults and the config file.
    #            See Jekyll::Configuration::DEFAULTS for a
    #            list of option names and their defaults.
    #
    # Returns the final configuration Hash.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:114
    def configuration(override = T.unsafe(nil)); end

    # Public: Tells you which Jekyll environment you are building in so you can skip tasks
    # if you need to.  This is useful when doing expensive compression tasks on css and
    # images and allows you to skip that when working in development.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:101
    def env; end

    # Public: Fetch the logger instance for this Jekyll process.
    #
    # Returns the LogAdapter instance.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:145
    def logger; end

    # Public: Set the log writer.
    #         New log writer must respond to the same methods
    #         as Ruby's interal Logger.
    #
    # writer - the new Logger-compatible log transport
    #
    # Returns the new logger.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:156
    def logger=(writer); end

    # Public: Ensures the questionable path is prefixed with the base directory
    #         and prepends the questionable path with the base directory if false.
    #
    # base_directory - the directory with which to prefix the questionable path
    # questionable_path - the path we're unsure about, and want prefixed
    #
    # Returns the sanitized path.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:174
    def sanitized_path(base_directory, questionable_path); end

    # Public: Set the TZ environment variable to use the timezone specified
    #
    # timezone - the IANA Time Zone
    #
    # Returns nothing
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:133
    def set_timezone(timezone); end

    # Public: An array of sites
    #
    # Returns the Jekyll sites created.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:163
    def sites; end
  end
end

# source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark.rb:4
module Jekyll::Converters; end

# Markdown converter.
# For more info on converters see https://jekyllrb.com/docs/plugins/converters/
#
# source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark.rb:5
class Jekyll::Converters::Markdown < ::Jekyll::Converter
  # Logic to do the content conversion.
  #
  # content - String content of file (without front matter).
  #
  # Returns a String of the converted content.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:83
  def convert(content); end

  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:90
  def extname_list; end

  # RuboCop does not allow reader methods to have names starting with `get_`
  # To ensure compatibility, this check has been disabled on this method
  #
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:35
  def get_processor; end

  # Does the given extension match this converter's list of acceptable extensions?
  # Takes one argument: the file's extension (including the dot).
  #
  # ext - The String extension to check.
  #
  # Returns true if it matches, false otherwise.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:65
  def matches(ext); end

  # Public: The extension to be given to the output file (including the dot).
  #
  # ext - The String extension or original file.
  #
  # Returns The String output file extension.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:74
  def output_ext(_ext); end

  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:12
  def setup; end

  # Public: A list of processors that you provide via plugins.
  #
  # Returns an array of symbols
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:55
  def third_party_processors; end

  # Public: Provides you with a list of processors comprised of the ones we support internally
  # and the ones that you have provided to us (if they're whitelisted for use in safe mode).
  #
  # Returns an array of symbols.
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:48
  def valid_processors; end

  private

  # Private: Determine whether a class name is an allowed custom
  #   markdown class name.
  #
  # parser_name - the name of the parser class
  #
  # Returns true if the parser name contains only alphanumeric characters and is defined
  # within Jekyll::Converters::Markdown
  #
  # @return [Boolean]
  #
  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:108
  def custom_class_allowed?(parser_name); end

  # source://jekyll-4.2.2/lib/jekyll/converters/markdown.rb:96
  def custom_processor; end

  class << self
    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:24
    def inherited(const_); end
  end
end

# source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark.rb:6
class Jekyll::Converters::Markdown::CommonMark
  # @return [CommonMark] a new instance of CommonMark
  #
  # source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark.rb:9
  def initialize(config); end

  # source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark.rb:27
  def convert(content); end

  private

  # source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark.rb:56
  def setup_extensions(config); end

  # source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark.rb:48
  def setup_options(config, parse_keys, render_keys); end

  # source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark.rb:38
  def validate(list, bucket, type); end
end

# source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark/html_renderer.rb:7
class Jekyll::Converters::Markdown::CommonMark::HtmlRenderer < ::CommonMarker::HtmlRenderer
  # source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark/html_renderer.rb:8
  def code_block(node); end

  private

  # source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark/html_renderer.rb:32
  def extract_code_lang(info); end

  # source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark/html_renderer.rb:39
  def out_data_attr(lang); end

  # source://jekyll-commonmark-1.4.0/lib/jekyll-commonmark/html_renderer.rb:45
  def render_with_rouge(code, lang); end
end

# source://jekyll-4.2.2/lib/jekyll/version.rb:4
Jekyll::VERSION = T.let(T.unsafe(nil), String)
