# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday-cookie_jar` gem.
# Please instead update this file by running `bin/tapioca gem faraday-cookie_jar`.

# Public: This is the main namespace for Faraday.  You can either use it to
# create Faraday::Connection objects, or access it directly.
#
# Examples
#
#   Faraday.get "http://faraday.com"
#
#   conn = Faraday.new "http://faraday.com"
#   conn.get '/'
#
# source://faraday-cookie_jar-0.0.7/lib/faraday/cookie_jar.rb:4
module Faraday
  class << self
    # source://faraday-0.17.5/lib/faraday.rb:232
    def const_missing(name); end

    # Public: Gets or sets the Symbol key identifying a default Adapter to use
    # for the default Faraday::Connection.
    #
    # source://faraday-0.17.5/lib/faraday.rb:29
    def default_adapter; end

    # Public: Updates default adapter while resetting
    # #default_connection.
    #
    # Returns the new default_adapter.
    #
    # source://faraday-0.17.5/lib/faraday.rb:87
    def default_adapter=(adapter); end

    # Gets the default connection used for simple scripts.
    #
    # Returns a Faraday::Connection, configured with the #default_adapter.
    #
    # source://faraday-0.17.5/lib/faraday.rb:114
    def default_connection; end

    # Public: Sets the default Faraday::Connection for simple scripts that
    # access the Faraday constant directly.
    #
    #     Faraday.get "https://faraday.com"
    #
    # source://faraday-0.17.5/lib/faraday.rb:35
    def default_connection=(_arg0); end

    # Gets the default connection options used when calling Faraday#new.
    #
    # Returns a Faraday::ConnectionOptions.
    #
    # source://faraday-0.17.5/lib/faraday.rb:121
    def default_connection_options; end

    # Public: Sets the default options used when calling Faraday#new.
    #
    # source://faraday-0.17.5/lib/faraday.rb:126
    def default_connection_options=(options); end

    # Public: Tells faraday to ignore the environment proxy (http_proxy).
    #
    # source://faraday-0.17.5/lib/faraday.rb:38
    def ignore_env_proxy; end

    # Public: Tells faraday to ignore the environment proxy (http_proxy).
    #
    # source://faraday-0.17.5/lib/faraday.rb:38
    def ignore_env_proxy=(_arg0); end

    # Public: Gets or sets the path that the Faraday libs are loaded from.
    #
    # source://faraday-0.17.5/lib/faraday.rb:25
    def lib_path; end

    # Public: Gets or sets the path that the Faraday libs are loaded from.
    #
    # source://faraday-0.17.5/lib/faraday.rb:25
    def lib_path=(_arg0); end

    # Public: Initializes a new Faraday::Connection.
    #
    # url     - The optional String base URL to use as a prefix for all
    #           requests.  Can also be the options Hash.
    # options - The optional Hash used to configure this Faraday::Connection.
    #           Any of these values will be set on every request made, unless
    #           overridden for a specific request.
    #           :url     - String base URL.
    #           :params  - Hash of URI query unencoded key/value pairs.
    #           :headers - Hash of unencoded HTTP header key/value pairs.
    #           :request - Hash of request options.
    #           :ssl     - Hash of SSL options.
    #           :proxy   - Hash of Proxy options.
    #
    # Examples
    #
    #   Faraday.new 'http://faraday.com'
    #
    #   # http://faraday.com?page=1
    #   Faraday.new 'http://faraday.com', :params => {:page => 1}
    #
    #   # same
    #
    #   Faraday.new :url => 'http://faraday.com',
    #     :params => {:page => 1}
    #
    # Returns a Faraday::Connection.
    #
    # source://faraday-0.17.5/lib/faraday.rb:67
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # Internal: Requires internal Faraday libraries.
    #
    # *libs - One or more relative String names to Faraday classes.
    #
    # Returns nothing.
    #
    # source://faraday-0.17.5/lib/faraday.rb:77
    def require_lib(*libs); end

    # Internal: Requires internal Faraday libraries.
    #
    # *libs - One or more relative String names to Faraday classes.
    #
    # Returns nothing.
    #
    # source://faraday-0.17.5/lib/faraday.rb:77
    def require_libs(*libs); end

    # @return [Boolean]
    #
    # source://faraday-0.17.5/lib/faraday.rb:94
    def respond_to?(symbol, include_private = T.unsafe(nil)); end

    # Public: Gets or sets the root path that Faraday is being loaded from.
    # This is the root from where the libraries are auto-loaded from.
    #
    # source://faraday-0.17.5/lib/faraday.rb:22
    def root_path; end

    # Public: Gets or sets the root path that Faraday is being loaded from.
    # This is the root from where the libraries are auto-loaded from.
    #
    # source://faraday-0.17.5/lib/faraday.rb:22
    def root_path=(_arg0); end

    private

    # Internal: Proxies method calls on the Faraday constant to
    # #default_connection.
    #
    # source://faraday-0.17.5/lib/faraday.rb:101
    def method_missing(name, *args, &block); end
  end
end

# source://faraday-cookie_jar-0.0.7/lib/faraday/cookie_jar.rb:5
class Faraday::CookieJar < ::Faraday::Middleware
  # @return [CookieJar] a new instance of CookieJar
  #
  # source://faraday-cookie_jar-0.0.7/lib/faraday/cookie_jar.rb:6
  def initialize(app, options = T.unsafe(nil)); end

  # source://faraday-cookie_jar-0.0.7/lib/faraday/cookie_jar.rb:11
  def call(env); end
end

# source://faraday-0.17.5/lib/faraday/upload_io.rb:66
Faraday::Parts = Multipart::Post::Parts

# source://faraday-0.17.5/lib/faraday.rb:133
Faraday::Timer = Timeout

# source://faraday-0.17.5/lib/faraday/upload_io.rb:65
Faraday::UploadIO = Multipart::Post::UploadIO

# source://faraday-0.17.5/lib/faraday.rb:17
Faraday::VERSION = T.let(T.unsafe(nil), String)
