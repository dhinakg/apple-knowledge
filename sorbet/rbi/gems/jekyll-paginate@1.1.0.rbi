# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jekyll-paginate` gem.
# Please instead update this file by running `bin/tapioca gem jekyll-paginate`.

# Public: Methods that generate a URL for a resource such as a Post or a Page.
#
# Examples
#
#   URL.new({
#     :template => /:categories/:title.html",
#     :placeholders => {:categories => "ruby", :title => "something"}
#   }).to_s
#
# source://jekyll-paginate-1.1.0/lib/jekyll-paginate/version.rb:1
module Jekyll
  class << self
    # Public: Generate a Jekyll configuration Hash by merging the default
    # options with anything in _config.yml, and adding the given options on top.
    #
    # override - A Hash of config directives that override any options in both
    #            the defaults and the config file.
    #            See Jekyll::Configuration::DEFAULTS for a
    #            list of option names and their defaults.
    #
    # Returns the final configuration Hash.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:114
    def configuration(override = T.unsafe(nil)); end

    # Public: Tells you which Jekyll environment you are building in so you can skip tasks
    # if you need to.  This is useful when doing expensive compression tasks on css and
    # images and allows you to skip that when working in development.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:101
    def env; end

    # Public: Fetch the logger instance for this Jekyll process.
    #
    # Returns the LogAdapter instance.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:145
    def logger; end

    # Public: Set the log writer.
    #         New log writer must respond to the same methods
    #         as Ruby's interal Logger.
    #
    # writer - the new Logger-compatible log transport
    #
    # Returns the new logger.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:156
    def logger=(writer); end

    # Public: Ensures the questionable path is prefixed with the base directory
    #         and prepends the questionable path with the base directory if false.
    #
    # base_directory - the directory with which to prefix the questionable path
    # questionable_path - the path we're unsure about, and want prefixed
    #
    # Returns the sanitized path.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:174
    def sanitized_path(base_directory, questionable_path); end

    # Public: Set the TZ environment variable to use the timezone specified
    #
    # timezone - the IANA Time Zone
    #
    # Returns nothing
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:133
    def set_timezone(timezone); end

    # Public: An array of sites
    #
    # Returns the Jekyll sites created.
    #
    # source://jekyll-4.2.2/lib/jekyll.rb:163
    def sites; end
  end
end

# source://jekyll-paginate-1.1.0/lib/jekyll-paginate/version.rb:2
module Jekyll::Paginate; end

# source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:3
class Jekyll::Paginate::Pager
  # Initialize a new Pager.
  #
  # site     - the Jekyll::Site object
  # page      - The Integer page number.
  # all_posts - The Array of all the site's Posts.
  # num_pages - The Integer number of pages or nil if you'd like the number
  #             of pages calculated.
  #
  # @return [Pager] a new instance of Pager
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:98
  def initialize(site, page, all_posts, num_pages = T.unsafe(nil)); end

  # Returns the value of attribute next_page.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:4
  def next_page; end

  # Returns the value of attribute next_page_path.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:4
  def next_page_path; end

  # Returns the value of attribute page.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:4
  def page; end

  # Returns the value of attribute per_page.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:4
  def per_page; end

  # Returns the value of attribute posts.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:4
  def posts; end

  # Returns the value of attribute previous_page.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:4
  def previous_page; end

  # Returns the value of attribute previous_page_path.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:4
  def previous_page_path; end

  # Convert this Pager's data to a Hash suitable for use by Liquid.
  #
  # Returns the Hash representation of this Pager.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:121
  def to_liquid; end

  # Returns the value of attribute total_pages.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:4
  def total_pages; end

  # Returns the value of attribute total_posts.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:4
  def total_posts; end

  class << self
    # Calculate the number of pages.
    #
    # all_posts - The Array of all Posts.
    # per_page  - The Integer of entries per page.
    #
    # Returns the Integer number of pages.
    #
    # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:13
    def calculate_pages(all_posts, per_page); end

    # Static: Return a String version of the input which has a leading slash.
    #         If the input already has a forward slash in position zero, it will be
    #         returned unchanged.
    #
    # path - a String path
    #
    # Returns the path with a leading slash
    #
    # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:78
    def ensure_leading_slash(path); end

    # Determine if the subdirectories of the two paths are the same relative to source
    #
    # source        - the site source
    # page_dir      - the directory of the Jekyll::Page
    # paginate_path - the absolute paginate path (from root of FS)
    #
    # Returns whether the subdirectories are the same relative to source
    #
    # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:50
    def in_hierarchy(source, page_dir, paginate_path); end

    # Static: Return the pagination path of the page
    #
    # site     - the Jekyll::Site object
    # num_page - the pagination page number
    #
    # Returns the pagination path as a string
    #
    # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:63
    def paginate_path(site, num_page); end

    # Static: Determine if a page is a possible candidate to be a template page.
    #         Page's name must be `index.html` and exist in any of the directories
    #         between the site source and `paginate_path`.
    #
    # config - the site configuration hash
    # page   - the Jekyll::Page about which we're inquiring
    #
    # Returns true if the
    #
    # @return [Boolean]
    #
    # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:35
    def pagination_candidate?(config, page); end

    # Determine if pagination is enabled the site.
    #
    # site - the Jekyll::Site object
    #
    # Returns true if pagination is enabled, false otherwise.
    #
    # @return [Boolean]
    #
    # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:22
    def pagination_enabled?(site); end

    # Static: Return a String version of the input without a leading slash.
    #
    # path - a String path
    #
    # Returns the input without the leading slash
    #
    # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pager.rb:87
    def remove_leading_slash(path); end
  end
end

# source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pagination.rb:4
class Jekyll::Paginate::Pagination < ::Jekyll::Generator
  # Generate paginated pages if necessary.
  #
  # site - The Site.
  #
  # Returns nothing.
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pagination.rb:15
  def generate(site); end

  # Paginates the blog's posts. Renders the index.html file into paginated
  # directories, e.g.: page2/index.html, page3/index.html, etc and adds more
  # site-wide data.
  #
  # site - The Site.
  # page - The index.html Page that requires pagination.
  #
  # {"paginator" => { "page" => <Number>,
  #                   "per_page" => <Number>,
  #                   "posts" => [<Post>],
  #                   "total_posts" => <Number>,
  #                   "total_pages" => <Number>,
  #                   "previous_page" => <Number>,
  #                   "next_page" => <Number> }}
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pagination.rb:40
  def paginate(site, page); end

  # Public: Find the Jekyll::Page which will act as the pager template
  #
  # site - the Jekyll::Site object
  #
  # Returns the Jekyll::Page which will act as the pager template
  #
  # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pagination.rb:76
  def template_page(site); end

  class << self
    # Static: Fetch the URL of the template page. Used to determine the
    #         path to the first pager in the series.
    #
    # site - the Jekyll::Site object
    #
    # Returns the url of the template page
    #
    # source://jekyll-paginate-1.1.0/lib/jekyll-paginate/pagination.rb:63
    def first_page_url(site); end

    # source://jekyll-4.2.2/lib/jekyll/plugin.rb:24
    def inherited(const_); end
  end
end

# source://jekyll-paginate-1.1.0/lib/jekyll-paginate/version.rb:3
Jekyll::Paginate::VERSION = T.let(T.unsafe(nil), String)

# source://jekyll-4.2.2/lib/jekyll/version.rb:4
Jekyll::VERSION = T.let(T.unsafe(nil), String)
