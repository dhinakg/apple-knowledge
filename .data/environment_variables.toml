
[environment_variables]

[environment_variables.ASL_DISABLE]
type = "boolean"
values = ["0","1"]
[environment_variables.CA_ASSERT_MAIN_THREAD_TRANSACTIONS]
type = "boolean"
values = ["0","1"]
[environment_variables.CA_DEBUG_TRANSACTIONS]
description = "debug core animation transactions"
type = "boolean"
[environment_variables.CFFIXED_USER_HOME]
examples = ["/tmp"]
format = "path"
type = "string"
[environment_variables.CFNETWORK_STORAGED_TIMERELOFF]
type = "boolean"
values = ["false","true"]
[environment_variables.CHECK_IN]
type = "boolean"
values = ["0","1"]
[environment_variables.CLEAN_FILES_OLDER_THAN_DAYS]
type = "integer"
[environment_variables.COMMAND_MODE]
examples = ["unix2003"]
type = "string"
[environment_variables.CUPS_DEBUG_FILTER]
examples = ["^(cupsDo|cupsGet|cupsMake|cupsSet|http|_http|ipp|_ipp|mime).*"]
format = "regex"
type = "string"
[environment_variables.CUPS_DEBUG_LEVEL]
type = "integer"
[environment_variables.CUPS_DEBUG_LOG]
format = "path"
type = "string"
[environment_variables.DEBUGSCOPE]
separator = ","
type = "array"
values = ["all","-policy-node","policy-set","policy","alloc","trust","bind","profile","trace","dbconn","OTR","serverxpc","sqlite3","error_thee_well","ringSigning"]
[environment_variables.DEFAULT_NETWORK_PRIVACY_LEVEL]
type = "string"
values = ["public"]
[environment_variables.DYLD_FALLBACK_FRAMEWORK_PATH]
default = "/Library/Frameworks:/System/Library/Frameworks"
description = "This is a colon separated list of directories that contain frameworks.  If a framework is not found at its install path, dyld uses this as a list of directories to search for the framework."
separator = ":"
type = "array"
[environment_variables.DYLD_FALLBACK_LIBRARY_PATH]
default = "/usr/local/lib:/usr/lib"
description = "This is a colon separated list of directories that contain libraries.  If a dylib is not found at its install\npath, dyld uses this as a list of directories to search for the dylib.  By default, it is set\nto /usr/local/lib:/usr/lib.\n"
separator = ":"
type = "array"
[environment_variables.DYLD_FORCE_FLAT_NAMESPACE]
description = "Disable two level namespaces"
[environment_variables.DYLD_FRAMEWORK_PATH]
description = "This is a colon separated list of directories that contain frameworks.  The dynamic linker searches these\ndirectories before it searches for the framework by its install name.  It allows you to test new versions of\nexisting frameworks. (A framework is a library install name that ends in the form `XXX.framework/Versions/A/XXX`\nor `XXX.framework/XXX`, where `XXX` and `A` are any name.)\n\nFor each framework that a program uses, the dynamic linker looks for the framework in each directory in\n`DYLD_FRAMEWORK_PATH` in turn. If it looks in all those directories and can't find the framework, it uses\nwhatever it would have loaded if `DYLD_FRAMEWORK_PATH` had not been set.\n\nUse the -L option to otool(1) to discover the frameworks and shared libraries that the executable is linked\nagainst.\n"
separator = ":"
type = "array"
[environment_variables.DYLD_IMAGE_SUFFIX]
description = "This is set to a string of a suffix to try to be used for all shared libraries used by the program.  For\nlibraries ending in \".dylib\" the suffix is applied just before the \".dylib\".\n\nFor all other libraries the suffix is appended to the library name.  This is useful for using conventional\n\"_profile\" and \"_debug\" libraries and frameworks.\n"
type = "string"
[environment_variables.DYLD_INSERT_LIBRARIES]
description = "This is a colon separated list of additional dynamic libraries to load before the ones specified in the program.\nIf instead, your goal is to substitute a library that would normally be loaded, use `DYLD_LIBRARY_PATH`\nor `DYLD_FRAMEWORK_PATH` instead.\n"
separator = ":"
type = "array"
[environment_variables.DYLD_LIBRARY_PATH]
description = "This is a colon separated list of directories that contain libraries. The dynamic linker searches these\ndirectories before it searches the default locations for libraries. It allows you to test new versions of\nexisting libraries.\n\nFor each dylib that a program uses, the dynamic linker looks for its leaf name in each directory in\n`DYLD_LIBRARY_PATH`.\n\nUse the `-L` option to `otool(1)` to discover the frameworks and shared libraries that the executable is linked\nagainst.\n"
separator = ":"
type = "array"
[environment_variables.DYLD_PRINT_APIS]
description = "If set, causes dyld to print a line whenever a dyld API is called (e.g. `dlopen()`).\n"
[environment_variables.DYLD_PRINT_BINDINGS]
description = "If set, causes dyld to print a line each time a symbolic name is bound.\n"
[environment_variables.DYLD_PRINT_ENV]
description = "If set, causes dyld to print a line of key=value for each environment variable in the process."
type = "presence"
[environment_variables.DYLD_PRINT_INITIALIZERS]
description = "If set, causes dyld to print out a line when running each initializer in every image.  Initializers run by dyld\ninclude constructors for C++ statically allocated objects, functions marked with\n`__attribute__((constructor))`, and `-init` functions.\n"
[environment_variables.DYLD_PRINT_LIBRARIES]
description = "If set, causes dyld to print a line for each mach-o image loaded into a process.  This is useful to make sure\nthat the use of DYLD_LIBRARY_PATH is getting what you want.\n"
type = "presence"
[environment_variables.DYLD_PRINT_LOADERS]
description = "If set, causes dyld to print a line whether each image is tracked by a JustInTimeLoader or a PrebuiltLoader.\nAdditionally, it prints if a PrebuiltLoaderSet was used to launch the process or if a PrebuiltLoader was\nwritten to make the next launch faster.\n"
type = "presence"
[environment_variables.DYLD_PRINT_SEARCHING]
description = "If set, causes dyld to print a line about each file system path checked when searching for an image to load.\n"
type = "presence"
[environment_variables.DYLD_PRINT_SEGMENTS]
description = "If set, causes dyld to print out a line containing the name and address range of each mach-o segment that\ndyld maps.  In addition it prints information about if the image was from the dyld shared cache.\n"
[environment_variables.DYLD_PRINT_TO_FILE]
description = "This is a path to a (writable) file. Normally, the dynamic linker writes all logging output\n(triggered by `DYLD_PRINT_*` settings) to file descriptor 2 (which is usually stderr).  But\nthis setting causes the dynamic linker to write logging output to the specified file.\n"
format = "path"
type = "string"
[environment_variables.DYLD_SHARED_CACHE_DIR]
description = "This is a directory containing dyld shared cache files.  This variable can be used in conjunction with\n`DYLD_SHARED_REGION=private` to run a process with an alternate shared cache.\n"
[environment_variables.DYLD_SHARED_REGION]
description = "This can be \"use\" (the default) or \"private\".  Setting it to \"private\" tells dyld to remove the shared region\nfrom the process address space and `mmap()` back in a private copy of the dyld shared cache in the shared region\naddress range. This is only useful if the shared cache on disk has been updated and is different than the shared\ncache in use.\n"
[environment_variables.DYLD_VERSIONED_FRAMEWORK_PATH]
default = "/Library/Frameworks:/System/Library/Frameworks"
description = "This is a colon separated list of directories that contain potential override frameworks.  The dynamic linker\nsearches these directories for frameworks.  For each framework found dyld looks at its `LC_ID_DYLIB` and gets\nthe current_version and install name.  Dyld then looks for the framework at the install name path.\nWhichever has the larger current_version value will be used in the process whenever a framework with that\ninstall name is required.  This is similar to `DYLD_FRAMEWORK_PATH` except instead of always overriding,\nit only overrides if the supplied framework is newer.\n\nNote: dyld does not check the framework's Info.plist to find its version.  Dyld only checks the `-current_version`\nnumber supplied when the framework was created.\n"
separator = ":"
type = "array"
[environment_variables.DYLD_VERSIONED_LIBRARY_PATH]
description = "This is a colon separated list of directories that contain potential override libraries.  The dynamic linker\nsearches these directories for dynamic libraries.  For each library found dyld looks at its `LC_ID_DYLIB` and\ngets the current_version and install name.  Dyld then looks for the library at the install name path.\nWhichever has the larger current_version value will be used in the process whenever a dylib with that install\nname is required.  This is similar to DYLD_LIBRARY_PATH except instead of always overriding, it only\noverrides is the supplied library is newer.\n"
[environment_variables.HOME]
format = "path"
type = "string"
[environment_variables.LIBDISPATCH_STRICT]
type = "boolean"
values = ["false","true"]
[environment_variables.LOGNAME]
format = "username"
type = "string"
[environment_variables.LaunchInstanceID]
format = "UUID"
type = "string"
[environment_variables.MallocCorruptionAbort]
type = "boolean"
values = ["0","1"]
[environment_variables.MallocMaxMagazines]
type = "integer"
[environment_variables.MallocNanoZone]
type = "boolean"
values = ["0","1"]
[environment_variables.MallocSpaceEfficient]
type = "boolean"
values = ["0","1"]
[environment_variables.MallocStackLoggingDirectory]
format = "path"
type = "string"
[environment_variables.NSRunningFromLaunchd]
type = "boolean"
values = ["0","1"]
[environment_variables.NSZombieEnabled]
type = "boolean"
values = ["false","true"]
[environment_variables.OS_ACTIVITY_MODE]
type = "boolean"
values = ["disable","enable"]
[environment_variables.PATH]
default = ["/usr/bin","/bin","/usr/sbin","/sbin"]
separator = ":"
type = "array"
[environment_variables.PRINTTOOL_MODE]
examples = ["agent","daemon"]
type = "string"
[environment_variables.PWD]
format = "path"
type = "string"
[environment_variables.REACH_DARK_WAKE_CONTROL]
type = "boolean"
values = ["true","false"]
[environment_variables.REACH_DARK_WAKE_NOTIFY]
type = "boolean"
values = ["true","false"]
[environment_variables.RPC_DEBUG]
type = "boolean"
values = ["0","1"]
[environment_variables.RUN_WITH_LAUNCHD]
type = "boolean"
values = ["0","1"]
[environment_variables.SSH_AUTH_SOCK]
format = "path"
type = "string"
[environment_variables.TMPDIR]
format = "path"
type = "string"
[environment_variables.WAIT4DEBUGGER]
type = "boolean"
values = ["false","true"]
[environment_variables.XPC_NULL_BOOTSTRAP]
type = "boolean"
values = ["0","1"]
[environment_variables.XPC_SERVICE_NAME]
type = "string"
[environment_variables.__CFBundleIdentifier]
type = "string"
[environment_variables.__CFPREFERENCES_AVOID_DAEMON]
type = "boolean"
values = ["0","1"]
[environment_variables.__CF_USER_TEXT_ENCODING]
examples = ["0x0:0:0","0x1F5:0x0:0x0"]
[environment_variables.com.apple.CoreData.CloudKitDebug]
type = "boolean"
values = ["0","1"]
[environment_variables.com.apple.CoreData.XPCDebug]
type = "boolean"
values = ["0","1"]